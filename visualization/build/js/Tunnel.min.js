var Tunnel=function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=18)}({18:function(t,n,e){const r=e(19);t.exports=r},19:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}};var u=i(r);u.right,u.left;var o=Array.prototype;o.slice,o.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);Array.prototype.slice;var a={value:function(){}};function s(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new l(r)}function l(t){this._=t}function c(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function h(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=a,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}l.prototype=s.prototype={constructor:l,on:function(t,n){var e,r=this._,i=c(t+"",r),u=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<o;)if(e=(t=i[u]).type)r[e]=h(r[e],t.name,n);else if(null==n)for(e in r)r[e]=h(r[e],t.name,null);return this}for(;++u<o;)if((e=(t=i[u]).type)&&(e=f(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new l(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),u=0;u<e;++u)i[u]=arguments[u+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(u=0,e=(r=this._[t]).length;u<e;++u)r[u].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,u=r.length;i<u;++i)r[i].value.apply(n,e)}};var p=s;function g(){}var v=function(t){return null==t?g:function(){return this.querySelector(t)}};function d(){return[]}var y=function(t){return null==t?d:function(){return this.querySelectorAll(t)}},_=function(t){return function(){return this.matches(t)}},m=function(t){return new Array(t.length)};function w(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}w.prototype={constructor:w,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function x(t,n,e,r,i,u){for(var o,a=0,s=n.length,l=u.length;a<l;++a)(o=n[a])?(o.__data__=u[a],r[a]=o):e[a]=new w(t,u[a]);for(;a<s;++a)(o=n[a])&&(i[a]=o)}function M(t,n,e,r,i,u,o){var a,s,l,c={},f=n.length,h=u.length,p=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(p[a]=l="$"+o.call(s,s.__data__,a,n),l in c?i[a]=s:c[l]=s);for(a=0;a<h;++a)(s=c[l="$"+o.call(t,u[a],a,u)])?(r[a]=s,s.__data__=u[a],c[l]=null):e[a]=new w(t,u[a]);for(a=0;a<f;++a)(s=n[a])&&c[p[a]]===s&&(i[a]=s)}function b(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var C="http://www.w3.org/1999/xhtml",T={svg:"http://www.w3.org/2000/svg",xhtml:C,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},A=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),T.hasOwnProperty(n)?{space:T[n],local:t}:t};function N(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function k(t,n){return function(){this.setAttribute(t,n)}}function D(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function L(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function S(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var R=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t){return function(){this.style.removeProperty(t)}}function P(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Y(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function F(t,n){return t.style.getPropertyValue(n)||R(t).getComputedStyle(t,null).getPropertyValue(n)}function H(t){return function(){delete this[t]}}function j(t,n){return function(){this[t]=n}}function q(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function O(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new X(t)}function X(t){this._node=t,this._names=O(t.getAttribute("class")||"")}function z(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function I(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function V(t){return function(){z(this,t)}}function Z(t){return function(){I(this,t)}}function B(t,n){return function(){(n.apply(this,arguments)?z:I)(this,t)}}X.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function W(){this.textContent=""}function Q(t){return function(){this.textContent=t}}function J(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function G(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function tt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function nt(){this.nextSibling&&this.parentNode.appendChild(this)}function et(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function rt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===C&&n.documentElement.namespaceURI===C?n.createElement(t):n.createElementNS(e,t)}}function it(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ut=function(t){var n=A(t);return(n.local?it:rt)(n)};function ot(){return null}function at(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function lt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var ct={},ft=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ct={mouseenter:"mouseover",mouseleave:"mouseout"}));function ht(t,n,e){return t=pt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function pt(t,n,e){return function(r){var i=ft;ft=r;try{t.call(this,this.__data__,n,e)}finally{ft=i}}}function gt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function vt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,u=n.length;r<u;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function dt(t,n,e){var r=ct.hasOwnProperty(t.type)?ht:pt;return function(i,u,o){var a,s=this.__on,l=r(n,u,o);if(s)for(var c=0,f=s.length;c<f;++c)if((a=s[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=e),void(a.value=n);this.addEventListener(t.type,l,e),a={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(a):this.__on=[a]}}function yt(t,n,e){var r=R(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function _t(t,n){return function(){return yt(this,t,n)}}function mt(t,n){return function(){return yt(this,t,n.apply(this,arguments))}}var wt=[null];function xt(t,n){this._groups=t,this._parents=n}function Mt(){return new xt([[document.documentElement]],wt)}xt.prototype=Mt.prototype={constructor:xt,select:function(t){"function"!=typeof t&&(t=v(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o,a=n[i],s=a.length,l=r[i]=new Array(s),c=0;c<s;++c)(u=a[c])&&(o=t.call(u,u.__data__,c,a))&&("__data__"in u&&(o.__data__=u.__data__),l[c]=o);return new xt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=y(t));for(var n=this._groups,e=n.length,r=[],i=[],u=0;u<e;++u)for(var o,a=n[u],s=a.length,l=0;l<s;++l)(o=a[l])&&(r.push(t.call(o,o.__data__,l,a)),i.push(o));return new xt(r,i)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],l=0;l<a;++l)(u=o[l])&&t.call(u,u.__data__,l,o)&&s.push(u);return new xt(r,this._parents)},data:function(t,n){if(!t)return g=new Array(this.size()),c=-1,this.each((function(t){g[++c]=t})),g;var e,r=n?M:x,i=this._parents,u=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=u.length,a=new Array(o),s=new Array(o),l=new Array(o),c=0;c<o;++c){var f=i[c],h=u[c],p=h.length,g=t.call(f,f&&f.__data__,c,i),v=g.length,d=s[c]=new Array(v),y=a[c]=new Array(v);r(f,h,d,y,l[c]=new Array(p),g,n);for(var _,m,w=0,b=0;w<v;++w)if(_=d[w]){for(w>=b&&(b=w+1);!(m=y[b])&&++b<v;);_._next=m||null}}return(a=new xt(a,i))._enter=s,a._exit=l,a},enter:function(){return new xt(this._enter||this._groups.map(m),this._parents)},exit:function(){return new xt(this._exit||this._groups.map(m),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,u=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?u.remove():e(u),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,l=n[a],c=e[a],f=l.length,h=o[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)o[a]=n[a];return new xt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],u=i.length-1,o=i[u];--u>=0;)(r=i[u])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=b);for(var e=this._groups,r=e.length,i=new Array(r),u=0;u<r;++u){for(var o,a=e[u],s=a.length,l=i[u]=new Array(s),c=0;c<s;++c)(o=a[c])&&(l[c]=o);l.sort(n)}return new xt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,u=r.length;i<u;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,u=n[e],o=0,a=u.length;o<a;++o)(i=u[o])&&t.call(i,i.__data__,o,u);return this},attr:function(t,n){var e=A(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?U:N:"function"==typeof n?e.local?S:L:e.local?D:k)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?E:"function"==typeof n?Y:P)(t,n,null==e?"":e)):F(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?H:"function"==typeof n?q:j)(t,n)):this.node()[t]},classed:function(t,n){var e=O(t+"");if(arguments.length<2){for(var r=$(this.node()),i=-1,u=e.length;++i<u;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?B:n?V:Z)(e,n))},text:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?J:Q)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?tt:K)(t)):this.node().innerHTML},raise:function(){return this.each(nt)},lower:function(){return this.each(et)},append:function(t){var n="function"==typeof t?t:ut(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:ut(t),r=null==n?ot:"function"==typeof n?n:v(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(at)},clone:function(t){return this.select(t?lt:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,u=gt(t+""),o=u.length;if(!(arguments.length<2)){for(a=n?dt:vt,null==e&&(e=!1),r=0;r<o;++r)this.each(a(u[r],n,e));return this}var a=this.node().__on;if(a)for(var s,l=0,c=a.length;l<c;++l)for(r=0,s=a[l];r<o;++r)if((i=u[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?mt:_t)(t,n))}};var bt=Mt;var Ct=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Tt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function At(){}var Nt="\\s*([+-]?\\d+)\\s*",Ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dt=/^#([0-9a-f]{3,8})$/,Lt=new RegExp("^rgb\\("+[Nt,Nt,Nt]+"\\)$"),St=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Rt=new RegExp("^rgba\\("+[Nt,Nt,Nt,Ut]+"\\)$"),Et=new RegExp("^rgba\\("+[kt,kt,kt,Ut]+"\\)$"),Pt=new RegExp("^hsl\\("+[Ut,kt,kt]+"\\)$"),Yt=new RegExp("^hsla\\("+[Ut,kt,kt,Ut]+"\\)$"),Ft={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ht(){return this.rgb().formatHex()}function jt(){return this.rgb().formatRgb()}function qt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Dt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Ot(n):3===e?new It(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new It(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new It(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Lt.exec(t))?new It(n[1],n[2],n[3],1):(n=St.exec(t))?new It(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rt.exec(t))?$t(n[1],n[2],n[3],n[4]):(n=Et.exec(t))?$t(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Pt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,1):(n=Yt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,n[4]):Ft.hasOwnProperty(t)?Ot(Ft[t]):"transparent"===t?new It(NaN,NaN,NaN,0):null}function Ot(t){return new It(t>>16&255,t>>8&255,255&t,1)}function $t(t,n,e,r){return r<=0&&(t=n=e=NaN),new It(t,n,e,r)}function Xt(t){return t instanceof At||(t=qt(t)),t?new It((t=t.rgb()).r,t.g,t.b,t.opacity):new It}function zt(t,n,e,r){return 1===arguments.length?Xt(t):new It(t,n,e,null==r?1:r)}function It(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Vt(){return"#"+Bt(this.r)+Bt(this.g)+Bt(this.b)}function Zt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Bt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Wt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Jt(t,n,e,r)}function Qt(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=qt(t)),!t)return new Jt;if(t instanceof Jt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),u=Math.max(n,e,r),o=NaN,a=u-i,s=(u+i)/2;return a?(o=n===u?(e-r)/a+6*(e<r):e===u?(r-n)/a+2:(n-e)/a+4,a/=s<.5?u+i:2-u-i,o*=60):a=s>0&&s<1?0:o,new Jt(o,a,s,t.opacity)}function Jt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Gt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Kt(t,n,e,r,i){var u=t*t,o=u*t;return((1-3*t+3*u-o)*n+(4-6*u+3*o)*e+(1+3*t+3*u-3*o)*r+o*i)/6}Ct(At,qt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ht,formatHex:Ht,formatHsl:function(){return Qt(this).formatHsl()},formatRgb:jt,toString:jt}),Ct(It,zt,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Vt,formatHex:Vt,formatRgb:Zt,toString:Zt})),Ct(Jt,(function(t,n,e,r){return 1===arguments.length?Qt(t):new Jt(t,n,e,null==r?1:r)}),Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new It(Gt(t>=240?t-240:t+120,i,r),Gt(t,i,r),Gt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var tn=function(t){return function(){return t}};function nn(t,n){return function(e){return t+e*n}}function en(t){return 1==(t=+t)?rn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):tn(isNaN(n)?e:n)}}function rn(t,n){var e=n-t;return e?nn(t,e):tn(isNaN(t)?n:t)}var un=function t(n){var e=en(n);function r(t,n){var r=e((t=zt(t)).r,(n=zt(n)).r),i=e(t.g,n.g),u=e(t.b,n.b),o=rn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=u(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function on(t){return function(n){var e,r,i=n.length,u=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=zt(n[e]),u[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return u=t(u),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=u(t),r.g=o(t),r.b=a(t),r+""}}}on((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],u=t[r+1],o=r>0?t[r-1]:2*i-u,a=r<n-1?t[r+2]:2*u-i;return Kt((e-r/n)*n,o,i,u,a)}})),on((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],u=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return Kt((e-r/n)*n,i,u,o,a)}}));var an=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},sn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ln=new RegExp(sn.source,"g");var cn,fn,hn=function(t,n){var e,r,i,u=sn.lastIndex=ln.lastIndex=0,o=-1,a=[],s=[];for(t+="",n+="";(e=sn.exec(t))&&(r=ln.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,s.push({i:o,x:an(e,r)})),u=ln.lastIndex;return u<n.length&&(i=n.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},pn=0,gn=0,vn=0,dn=0,yn=0,_n=0,mn="object"==typeof performance&&performance.now?performance:Date,wn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xn(){return yn||(wn(Mn),yn=mn.now()+_n)}function Mn(){yn=0}function bn(){this._call=this._time=this._next=null}function Cn(t,n,e){var r=new bn;return r.restart(t,n,e),r}function Tn(){yn=(dn=mn.now())+_n,pn=gn=0;try{!function(){xn(),++pn;for(var t,n=cn;n;)(t=yn-n._time)>=0&&n._call.call(null,t),n=n._next;--pn}()}finally{pn=0,function(){var t,n,e=cn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:cn=n);fn=t,Nn(r)}(),yn=0}}function An(){var t=mn.now(),n=t-dn;n>1e3&&(_n-=n,dn=t)}function Nn(t){pn||(gn&&(gn=clearTimeout(gn)),t-yn>24?(t<1/0&&(gn=setTimeout(Tn,t-mn.now()-_n)),vn&&(vn=clearInterval(vn))):(vn||(dn=mn.now(),vn=setInterval(An,1e3)),pn=1,wn(Tn)))}bn.prototype=Cn.prototype={constructor:bn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?xn():+e)+(null==n?0:+n),this._next||fn===this||(fn?fn._next=this:cn=this,fn=this),this._call=t,this._time=e,Nn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Nn())}};var Un=function(t,n,e){var r=new bn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},kn=p("start","end","cancel","interrupt"),Dn=[],Ln=function(t,n,e,r,i,u){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function u(s){var l,c,f,h;if(1!==e.state)return a();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return Un(u);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(Un((function(){3===e.state&&(e.state=4,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),u=-1,o=r.length;++u<o;)r[u].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Cn((function(t){e.state=1,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:kn,tween:Dn,time:u.time,delay:u.delay,duration:u.duration,ease:u.ease,timer:null,state:0})};function Sn(t,n){var e=En(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Rn(t,n){var e=En(t,n);if(e.state>3)throw new Error("too late; already running");return e}function En(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Pn,Yn,Fn,Hn,jn=function(t,n){var e,r,i,u=t.__transition,o=!0;if(u){for(i in n=null==n?null:n+"",u)(e=u[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete u[i]):o=!1;o&&delete t.__transition}},qn=180/Math.PI,On={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},$n=function(t,n,e,r,i,u){var o,a,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:u,rotate:Math.atan2(n,t)*qn,skewX:Math.atan(s)*qn,scaleX:o,scaleY:a}};function Xn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(u,o){var a=[],s=[];return u=t(u),o=t(o),function(t,r,i,u,o,a){if(t!==i||r!==u){var s=o.push("translate(",null,n,null,e);a.push({i:s-4,x:an(t,i)},{i:s-2,x:an(r,u)})}else(i||u)&&o.push("translate("+i+n+u+e)}(u.translateX,u.translateY,o.translateX,o.translateY,a,s),function(t,n,e,u){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),u.push({i:e.push(i(e)+"rotate(",null,r)-2,x:an(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(u.rotate,o.rotate,a,s),function(t,n,e,u){t!==n?u.push({i:e.push(i(e)+"skewX(",null,r)-2,x:an(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(u.skewX,o.skewX,a,s),function(t,n,e,r,u,o){if(t!==e||n!==r){var a=u.push(i(u)+"scale(",null,",",null,")");o.push({i:a-4,x:an(t,e)},{i:a-2,x:an(n,r)})}else 1===e&&1===r||u.push(i(u)+"scale("+e+","+r+")")}(u.scaleX,u.scaleY,o.scaleX,o.scaleY,a,s),u=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var zn=Xn((function(t){return"none"===t?On:(Pn||(Pn=document.createElement("DIV"),Yn=document.documentElement,Fn=document.defaultView),Pn.style.transform=t,t=Fn.getComputedStyle(Yn.appendChild(Pn),null).getPropertyValue("transform"),Yn.removeChild(Pn),t=t.slice(7,-1).split(","),$n(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),In=Xn((function(t){return null==t?On:(Hn||(Hn=document.createElementNS("http://www.w3.org/2000/svg","g")),Hn.setAttribute("transform",t),(t=Hn.transform.baseVal.consolidate())?(t=t.matrix,$n(t.a,t.b,t.c,t.d,t.e,t.f)):On)}),", ",")",")");function Vn(t,n){var e,r;return function(){var i=Rn(this,t),u=i.tween;if(u!==e)for(var o=0,a=(r=e=u).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function Zn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var u=Rn(this,t),o=u.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=a;break}s===l&&i.push(a)}u.tween=i}}function Bn(t,n,e){var r=t._id;return t.each((function(){var t=Rn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return En(t,r).value[n]}}var Wn=function(t,n){var e;return("number"==typeof n?an:n instanceof qt?un:(e=qt(n))?(n=e,un):hn)(t,n)};function Qn(t){return function(){this.removeAttribute(t)}}function Jn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Gn(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttribute(t);return o===u?null:o===r?i:i=n(r=o,e)}}function Kn(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===u?null:o===r?i:i=n(r=o,e)}}function te(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttribute(t)}}function ne(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function ee(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function re(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function ie(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&re(t,i)),e}return i._value=n,i}function ue(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ee(t,i)),e}return i._value=n,i}function oe(t,n){return function(){Sn(this,t).delay=+n.apply(this,arguments)}}function ae(t,n){return n=+n,function(){Sn(this,t).delay=n}}function se(t,n){return function(){Rn(this,t).duration=+n.apply(this,arguments)}}function le(t,n){return n=+n,function(){Rn(this,t).duration=n}}function ce(t,n){if("function"!=typeof n)throw new Error;return function(){Rn(this,t).ease=n}}function fe(t,n,e){var r,i,u=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Sn:Rn;return function(){var o=u(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}var he=bt.prototype.constructor;function pe(t){return function(){this.style.removeProperty(t)}}function ge(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function ve(t,n,e){var r,i;function u(){var u=n.apply(this,arguments);return u!==i&&(r=(i=u)&&ge(t,u,e)),r}return u._value=n,u}function de(t){return function(n){this.textContent=t.call(this,n)}}function ye(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&de(r)),n}return r._value=t,r}var _e=0;function me(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function we(){return++_e}var xe=bt.prototype;me.prototype=function(t){return bt().transition(t)}.prototype={constructor:me,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=v(t));for(var r=this._groups,i=r.length,u=new Array(i),o=0;o<i;++o)for(var a,s,l=r[o],c=l.length,f=u[o]=new Array(c),h=0;h<c;++h)(a=l[h])&&(s=t.call(a,a.__data__,h,l))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,Ln(f[h],n,e,h,f,En(a,e)));return new me(u,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,i=r.length,u=[],o=[],a=0;a<i;++a)for(var s,l=r[a],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),g=En(s,e),v=0,d=p.length;v<d;++v)(h=p[v])&&Ln(h,n,e,v,p,g);u.push(p),o.push(s)}return new me(u,o,n,e)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],l=0;l<a;++l)(u=o[l])&&t.call(u,u.__data__,l,o)&&s.push(u);return new me(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,l=n[a],c=e[a],f=l.length,h=o[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)o[a]=n[a];return new me(o,this._parents,this._name,this._id)},selection:function(){return new he(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=we(),r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,l=0;l<s;++l)if(o=a[l]){var c=En(o,n);Ln(o,t,e,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new me(r,this._parents,t,e)},call:xe.call,nodes:xe.nodes,node:xe.node,size:xe.size,empty:xe.empty,each:xe.each,on:function(t,n){var e=this._id;return arguments.length<2?En(this.node(),e).on.on(t):this.each(fe(e,t,n))},attr:function(t,n){var e=A(t),r="transform"===e?In:Wn;return this.attrTween(t,"function"==typeof n?(e.local?ne:te)(e,r,Bn(this,"attr."+t,n)):null==n?(e.local?Jn:Qn)(e):(e.local?Kn:Gn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=A(t);return this.tween(e,(r.local?ie:ue)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?zn:Wn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var u=F(this,t),o=(this.style.removeProperty(t),F(this,t));return u===o?null:u===e&&o===r?i:i=n(e=u,r=o)}}(t,r)).on("end.style."+t,pe(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,u;return function(){var o=F(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=F(this,t)),o===s?null:o===r&&s===i?u:(i=s,u=n(r=o,a))}}(t,r,Bn(this,"style."+t,n))).each(function(t,n){var e,r,i,u,o="style."+n,a="end."+o;return function(){var s=Rn(this,t),l=s.on,c=null==s.value[o]?u||(u=pe(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(a,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,u=e+"";return function(){var o=F(this,t);return o===u?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ve(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Bn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,ye(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=En(this.node(),e).tween,u=0,o=i.length;u<o;++u)if((r=i[u]).name===t)return r.value;return null}return this.each((null==n?Vn:Zn)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?oe:ae)(n,t)):En(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?se:le)(n,t)):En(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ce(n,t)):En(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(u,o){var a={value:o},s={value:function(){0==--i&&u()}};e.each((function(){var e=Rn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var Me={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function be(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Me.time=xn(),Me;return e}bt.prototype.interrupt=function(t){return this.each((function(){jn(this,t)}))},bt.prototype.transition=function(t){var n,e;t instanceof me?(n=t._id,t=t._name):(n=we(),(e=Me).time=xn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,l=0;l<s;++l)(o=a[l])&&Ln(o,t,n,l,a,e||be(o,n));return new me(r,this._parents,t,n)};function Ce(t){return[+t[0],+t[1]]}function Te(t){return[Ce(t[0]),Ce(t[1])]}["w","e"].map(Ae),["n","s"].map(Ae),["n","w","e","s","nw","ne","sw","se"].map(Ae);function Ae(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ne=Math.PI,Ue=2*Ne,ke=Ue-1e-6;function De(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Le(){return new De}De.prototype=Le.prototype={constructor:De,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+u)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var u=this._x1,o=this._y1,a=e-t,s=r-n,l=u-t,c=o-n,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(c*a-s*l)>1e-6&&i){var h=e-u,p=r-o,g=a*a+s*s,v=h*h+p*p,d=Math.sqrt(g),y=Math.sqrt(f),_=i*Math.tan((Ne-Math.acos((g+f-v)/(2*d*y)))/2),m=_/y,w=_/d;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*l)+","+(n+m*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+w*a)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,u){t=+t,n=+n,u=!!u;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+o,l=n+a,c=1^u,f=u?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),e&&(f<0&&(f=f%Ue+Ue),f>ke?this._+="A"+e+","+e+",0,1,"+c+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Ne)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Se(){}function Re(t,n){var e=new Se;if(t instanceof Se)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,u=t.length;if(null==n)for(;++i<u;)e.set(i,t[i]);else for(;++i<u;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}Se.prototype=Re.prototype={constructor:Se,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ee=Re;function Pe(){}var Ye=Ee.prototype;function Fe(t,n){var e=new Pe;if(t instanceof Pe)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Pe.prototype=Fe.prototype={constructor:Pe,has:Ye.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ye.remove,clear:Ye.clear,values:Ye.keys,size:Ye.size,empty:Ye.empty,each:Ye.each};Array.prototype.slice;var He={},je={};function qe(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function Oe(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function $e(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Xe(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),u=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+$e(-n,6):n>9999?"+"+$e(n,6):$e(n,4))+"-"+$e(t.getUTCMonth()+1,2)+"-"+$e(t.getUTCDate(),2)+(u?"T"+$e(e,2)+":"+$e(r,2)+":"+$e(i,2)+"."+$e(u,3)+"Z":i?"T"+$e(e,2)+":"+$e(r,2)+":"+$e(i,2)+"Z":r||e?"T"+$e(e,2)+":"+$e(r,2)+"Z":"")}var ze=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],u=t.length,o=0,a=0,s=u<=0,l=!1;function c(){if(s)return je;if(l)return l=!1,He;var n,r,i=o;if(34===t.charCodeAt(i)){for(;o++<u&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(n=o)>=u?s=!0:10===(r=t.charCodeAt(o++))?l=!0:13===r&&(l=!0,10===t.charCodeAt(o)&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<u;){if(10===(r=t.charCodeAt(n=o++)))l=!0;else if(13===r)l=!0,10===t.charCodeAt(o)&&++o;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,u)}for(10===t.charCodeAt(u-1)&&--u,13===t.charCodeAt(u-1)&&--u;(r=c())!==je;){for(var f=[];r!==He&&r!==je;)f.push(r),r=c();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))}function u(n){return n.map(o).join(t)}function o(t){return null==t?"":t instanceof Date?Xe(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,u=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=qe(t);return function(r,i){return n(e(r),i,t)}}(t,n):qe(t)}));return u.columns=i||[],u},parseRows:r,format:function(n,e){return null==e&&(e=Oe(n)),[e.map(o).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Oe(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(u).join("\n")},formatRow:u,formatValue:o}},Ie=ze(","),Ve=Ie.parse,Ze=(Ie.parseRows,Ie.format,Ie.formatBody,Ie.formatRows,Ie.formatRow,Ie.formatValue,ze("\t")),Be=Ze.parse;Ze.parseRows,Ze.format,Ze.formatBody,Ze.formatRows,Ze.formatRow,Ze.formatValue;function We(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Qe=function(t,n){return fetch(t,n).then(We)};function Je(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Qe(n,e).then((function(n){return t(n,r)}))}}Je(Ve),Je(Be);function Ge(t){return function(n,e){return Qe(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Ge("application/xml"),Ge("text/html"),Ge("image/svg+xml");function Ke(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,u,o,a,s,l,c,f,h,p=t._root,g={data:r},v=t._x0,d=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=g,t;for(;p.length;)if((l=n>=(u=(v+y)/2))?v=u:y=u,(c=e>=(o=(d+_)/2))?d=o:_=o,i=p,!(p=p[f=c<<1|l]))return i[f]=g,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return g.next=p,i?i[f]=g:t._root=g,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=n>=(u=(v+y)/2))?v=u:y=u,(c=e>=(o=(d+_)/2))?d=o:_=o}while((f=c<<1|l)==(h=(s>=o)<<1|a>=u));return i[h]=p,i[f]=g,t}var tr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function nr(t){return t[0]}function er(t){return t[1]}function rr(t,n,e){var r=new ir(null==n?nr:n,null==e?er:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ir(t,n,e,r,i,u){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=u,this._root=void 0}function ur(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var or=rr.prototype=ir.prototype;or.copy=function(){var t,n,e=new ir(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ur(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ur(n));return e},or.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ke(this.cover(n,e),n,e,t)},or.addAll=function(t){var n,e,r,i,u=t.length,o=new Array(u),a=new Array(u),s=1/0,l=1/0,c=-1/0,f=-1/0;for(e=0;e<u;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));if(s>c||l>f)return this;for(this.cover(s,l).cover(c,f),e=0;e<u;++e)Ke(this,o[e],a[e],t[e]);return this},or.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,u=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,u=(r=Math.floor(n))+1;else{for(var o,a,s=i-e,l=this._root;e>t||t>=i||r>n||n>=u;)switch(a=(n<r)<<1|t<e,(o=new Array(4))[a]=l,l=o,s*=2,a){case 0:i=e+s,u=r+s;break;case 1:e=i-s,u=r+s;break;case 2:i=e+s,r=u-s;break;case 3:e=i-s,r=u-s}this._root&&this._root.length&&(this._root=l)}return this._x0=e,this._y0=r,this._x1=i,this._y1=u,this},or.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},or.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},or.find=function(t,n,e){var r,i,u,o,a,s,l,c=this._x0,f=this._y0,h=this._x1,p=this._y1,g=[],v=this._root;for(v&&g.push(new tr(v,c,f,h,p)),null==e?e=1/0:(c=t-e,f=n-e,h=t+e,p=n+e,e*=e);s=g.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(u=s.y0)>p||(o=s.x1)<c||(a=s.y1)<f))if(v.length){var d=(i+o)/2,y=(u+a)/2;g.push(new tr(v[3],d,y,o,a),new tr(v[2],i,y,d,a),new tr(v[1],d,u,o,y),new tr(v[0],i,u,d,y)),(l=(n>=y)<<1|t>=d)&&(s=g[g.length-1],g[g.length-1]=g[g.length-1-l],g[g.length-1-l]=s)}else{var _=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),w=_*_+m*m;if(w<e){var x=Math.sqrt(e=w);c=t-x,f=n-x,h=t+x,p=n+x,r=v.data}}return r},or.remove=function(t){if(isNaN(u=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,u,o,a,s,l,c,f,h,p=this._root,g=this._x0,v=this._y0,d=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((l=u>=(a=(g+d)/2))?g=a:d=a,(c=o>=(s=(v+y)/2))?v=s:y=s,n=p,!(p=p[f=c<<1|l]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},or.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},or.root=function(){return this._root},or.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},or.visit=function(t){var n,e,r,i,u,o,a=[],s=this._root;for(s&&a.push(new tr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,u=n.x1,o=n.y1)&&s.length){var l=(r+u)/2,c=(i+o)/2;(e=s[3])&&a.push(new tr(e,l,c,u,o)),(e=s[2])&&a.push(new tr(e,r,c,l,o)),(e=s[1])&&a.push(new tr(e,l,i,u,c)),(e=s[0])&&a.push(new tr(e,r,i,l,c))}return this},or.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new tr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var u,o=n.x0,a=n.y0,s=n.x1,l=n.y1,c=(o+s)/2,f=(a+l)/2;(u=i[0])&&e.push(new tr(u,o,a,c,f)),(u=i[1])&&e.push(new tr(u,c,a,s,f)),(u=i[2])&&e.push(new tr(u,o,f,c,l)),(u=i[3])&&e.push(new tr(u,c,f,s,l))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},or.x=function(t){return arguments.length?(this._x=t,this):this._x},or.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var ar=function(){return Math.random()},sr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(ar),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var u;if(null!=r)u=r,r=null;else do{r=2*n()-1,u=2*n()-1,i=r*r+u*u}while(!i||i>1);return t+e*u*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(ar)),lr=(function t(n){function e(){var t=sr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(ar),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(ar));(function t(n){function e(t){var e=lr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(ar),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(ar);var cr=Array.prototype;cr.map,cr.slice;var fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hr(t){if(!(n=fr.exec(t)))throw new Error("invalid format: "+t);var n;return new pr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function pr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}hr.prototype=pr.prototype,pr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var gr,vr,dr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},yr=function(t){return(t=dr(Math.abs(t)))?t[1]:NaN},_r=function(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},mr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return _r(100*t,n)},r:_r,s:function(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1],u=i-(gr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return u===o?r:u>o?r+new Array(u-o+1).join("0"):u>0?r.slice(0,u)+"."+r.slice(u):"0."+new Array(1-u).join("0")+dr(t,Math.max(0,n+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},wr=function(t){return t},xr=Array.prototype.map,Mr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];vr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?wr:(n=xr.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,u=[],o=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),u.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[o=(o+1)%n.length];return u.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",u=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?wr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(xr.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=hr(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,v=t.comma,d=t.precision,y=t.trim,_=t.type;"n"===_?(v=!0,_="g"):mr[_]||(void 0===d&&(d=12),y=!0,_="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var m="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",w="$"===h?u:/[%p]/.test(_)?s:"",x=mr[_],M=/[defgprs%]/.test(_);function b(t){var i,u,s,h=m,b=w;if("c"===_)b=x(t)+b,t="";else{var C=(t=+t)<0;if(t=isNaN(t)?c:x(Math.abs(t),d),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),C&&0==+t&&(C=!1),h=(C?"("===f?f:l:"-"===f||"("===f?"":f)+h,b=("s"===_?Mr[8+gr/3]:"")+b+(C&&"("===f?")":""),M)for(i=-1,u=t.length;++i<u;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var T=h.length+t.length+b.length,A=T<g?new Array(g-T+1).join(n):"";switch(v&&p&&(t=r(A+t,A.length?g-b.length:1/0),A=""),e){case"<":t=h+t+b+A;break;case"=":t=h+A+t+b;break;case"^":t=A.slice(0,T=A.length>>1)+h+t+b+A.slice(T);break;default:t=A+h+t+b}return a(t)}return d=void 0===d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=hr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(yr(n)/3))),i=Math.pow(10,-r),u=Mr[8+r/3];return function(t){return e(i*t)+u}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),vr.format,vr.formatPrefix;var br=new Date,Cr=new Date;function Tr(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,u){var o,a=[];if(e=i.ceil(e),u=null==u?1:Math.floor(u),!(e<r&&u>0))return a;do{a.push(o=new Date(+e)),n(e,u),t(e)}while(o<e&&e<r);return a},i.filter=function(e){return Tr((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return br.setTime(+n),Cr.setTime(+r),t(br),t(Cr),Math.floor(e(br,Cr))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Ar=Tr((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Ar.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Tr((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Nr=Ar,Ur=(Ar.range,Tr((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));Ur.range;function kr(t){return Tr((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Dr=kr(0),Lr=kr(1),Sr=kr(2),Rr=kr(3),Er=kr(4),Pr=kr(5),Yr=kr(6),Fr=(Dr.range,Lr.range,Sr.range,Rr.range,Er.range,Pr.range,Yr.range,Tr((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Hr=Fr,jr=(Fr.range,Tr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),qr=(jr.range,Tr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Or=(qr.range,Tr((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),$r=(Or.range,Tr((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));$r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Tr((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):$r:null};$r.range;function Xr(t){return Tr((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var zr=Xr(0),Ir=Xr(1),Vr=Xr(2),Zr=Xr(3),Br=Xr(4),Wr=Xr(5),Qr=Xr(6),Jr=(zr.range,Ir.range,Vr.range,Zr.range,Br.range,Wr.range,Qr.range,Tr((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Gr=Jr,Kr=(Jr.range,Tr((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Kr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Tr((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var ti=Kr;Kr.range;function ni(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ei(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ri(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var ii,ui={"-":"",_:" ",0:"0"},oi=/^\s*\d+/,ai=/^%/,si=/[\\^$*+?|[\]().{}]/g;function li(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(n)+i:i)}function ci(t){return t.replace(si,"\\$&")}function fi(t){return new RegExp("^(?:"+t.map(ci).join("|")+")","i")}function hi(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function pi(t,n,e){var r=oi.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function gi(t,n,e){var r=oi.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function vi(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function di(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function yi(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function _i(t,n,e){var r=oi.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function mi(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function wi(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function xi(t,n,e){var r=oi.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Mi(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function bi(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Ci(t,n,e){var r=oi.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ti(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ai(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ni(t,n,e){var r=oi.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ui(t,n,e){var r=oi.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ki(t,n,e){var r=oi.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Di(t,n,e){var r=ai.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Li(t,n,e){var r=oi.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Si(t,n,e){var r=oi.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Ri(t,n){return li(t.getDate(),n,2)}function Ei(t,n){return li(t.getHours(),n,2)}function Pi(t,n){return li(t.getHours()%12||12,n,2)}function Yi(t,n){return li(1+Hr.count(Nr(t),t),n,3)}function Fi(t,n){return li(t.getMilliseconds(),n,3)}function Hi(t,n){return Fi(t,n)+"000"}function ji(t,n){return li(t.getMonth()+1,n,2)}function qi(t,n){return li(t.getMinutes(),n,2)}function Oi(t,n){return li(t.getSeconds(),n,2)}function $i(t){var n=t.getDay();return 0===n?7:n}function Xi(t,n){return li(Dr.count(Nr(t)-1,t),n,2)}function zi(t,n){var e=t.getDay();return t=e>=4||0===e?Er(t):Er.ceil(t),li(Er.count(Nr(t),t)+(4===Nr(t).getDay()),n,2)}function Ii(t){return t.getDay()}function Vi(t,n){return li(Lr.count(Nr(t)-1,t),n,2)}function Zi(t,n){return li(t.getFullYear()%100,n,2)}function Bi(t,n){return li(t.getFullYear()%1e4,n,4)}function Wi(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+li(n/60|0,"0",2)+li(n%60,"0",2)}function Qi(t,n){return li(t.getUTCDate(),n,2)}function Ji(t,n){return li(t.getUTCHours(),n,2)}function Gi(t,n){return li(t.getUTCHours()%12||12,n,2)}function Ki(t,n){return li(1+Gr.count(ti(t),t),n,3)}function tu(t,n){return li(t.getUTCMilliseconds(),n,3)}function nu(t,n){return tu(t,n)+"000"}function eu(t,n){return li(t.getUTCMonth()+1,n,2)}function ru(t,n){return li(t.getUTCMinutes(),n,2)}function iu(t,n){return li(t.getUTCSeconds(),n,2)}function uu(t){var n=t.getUTCDay();return 0===n?7:n}function ou(t,n){return li(zr.count(ti(t)-1,t),n,2)}function au(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Br(t):Br.ceil(t),li(Br.count(ti(t),t)+(4===ti(t).getUTCDay()),n,2)}function su(t){return t.getUTCDay()}function lu(t,n){return li(Ir.count(ti(t)-1,t),n,2)}function cu(t,n){return li(t.getUTCFullYear()%100,n,2)}function fu(t,n){return li(t.getUTCFullYear()%1e4,n,4)}function hu(){return"+0000"}function pu(){return"%"}function gu(t){return+t}function vu(t){return Math.floor(+t/1e3)}!function(t){ii=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,u=t.days,o=t.shortDays,a=t.months,s=t.shortMonths,l=fi(i),c=hi(i),f=fi(u),h=hi(u),p=fi(o),g=hi(o),v=fi(a),d=hi(a),y=fi(s),_=hi(s),m={a:function(t){return o[t.getDay()]},A:function(t){return u[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Ri,e:Ri,f:Hi,H:Ei,I:Pi,j:Yi,L:Fi,m:ji,M:qi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:gu,s:vu,S:Oi,u:$i,U:Xi,V:zi,w:Ii,W:Vi,x:null,X:null,y:Zi,Y:Bi,Z:Wi,"%":pu},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return u[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Qi,e:Qi,f:nu,H:Ji,I:Gi,j:Ki,L:tu,m:eu,M:ru,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:gu,s:vu,S:iu,u:uu,U:ou,V:au,w:su,W:lu,x:null,X:null,y:cu,Y:fu,Z:hu,"%":pu},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=g[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=d[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return C(t,n,e,r)},d:bi,e:bi,f:ki,H:Ti,I:Ti,j:Ci,L:Ui,m:Mi,M:Ai,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:xi,Q:Li,s:Si,S:Ni,u:gi,U:vi,V:di,w:pi,W:yi,x:function(t,n,r){return C(t,e,n,r)},X:function(t,n,e){return C(t,r,n,e)},y:mi,Y:_i,Z:wi,"%":Di};function M(t,n){return function(e){var r,i,u,o=[],a=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++a<l;)37===t.charCodeAt(a)&&(o.push(t.slice(s,a)),null!=(i=ui[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),o.push(r),s=a+1);return o.push(t.slice(s,a)),o.join("")}}function b(t,n){return function(e){var r,i,u=ri(1900,void 0,1);if(C(u,t,e+="",0)!=e.length)return null;if("Q"in u)return new Date(u.Q);if("s"in u)return new Date(1e3*u.s+("L"in u?u.L:0));if(n&&!("Z"in u)&&(u.Z=0),"p"in u&&(u.H=u.H%12+12*u.p),void 0===u.m&&(u.m="q"in u?u.q:0),"V"in u){if(u.V<1||u.V>53)return null;"w"in u||(u.w=1),"Z"in u?(i=(r=ei(ri(u.y,0,1))).getUTCDay(),r=i>4||0===i?Ir.ceil(r):Ir(r),r=Gr.offset(r,7*(u.V-1)),u.y=r.getUTCFullYear(),u.m=r.getUTCMonth(),u.d=r.getUTCDate()+(u.w+6)%7):(i=(r=ni(ri(u.y,0,1))).getDay(),r=i>4||0===i?Lr.ceil(r):Lr(r),r=Hr.offset(r,7*(u.V-1)),u.y=r.getFullYear(),u.m=r.getMonth(),u.d=r.getDate()+(u.w+6)%7)}else("W"in u||"U"in u)&&("w"in u||(u.w="u"in u?u.u%7:"W"in u?1:0),i="Z"in u?ei(ri(u.y,0,1)).getUTCDay():ni(ri(u.y,0,1)).getDay(),u.m=0,u.d="W"in u?(u.w+6)%7+7*u.W-(i+5)%7:u.w+7*u.U-(i+6)%7);return"Z"in u?(u.H+=u.Z/100|0,u.M+=u.Z%100,ei(u)):ni(u)}}function C(t,n,e,r){for(var i,u,o=0,a=n.length,s=e.length;o<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(u=x[i in ui?n.charAt(o++):i])||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=M(e,m),m.X=M(r,m),m.c=M(n,m),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),ii.format,ii.parse,ii.utcFormat,ii.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var du=Tr((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),yu=(du.range,Tr((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),_u=(yu.range,Tr((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));_u.range;function mu(){this._=null}function wu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function xu(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Mu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function bu(t){for(;t.L;)t=t.L;return t}mu.prototype={constructor:mu,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=bu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(xu(this,e),e=(t=e).U),e.C=!1,r.C=!0,Mu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Mu(this,e),e=(t=e).U),e.C=!1,r.C=!0,xu(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,o=t.R;if(e=u?o?bu(o):u:o,i?i.L===t?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,xu(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Mu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,xu(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Mu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,xu(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Mu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Cu=mu;function Tu(t,n,e,r){var i=[null,null],u=Wu.push(i)-1;return i.left=t,i.right=n,e&&Nu(i,t,n,e),r&&Nu(i,n,t,r),Zu[t.index].halfedges.push(u),Zu[n.index].halfedges.push(u),i}function Au(t,n,e){var r=[n,e];return r.left=t,r}function Nu(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Uu(t,n,e,r,i){var u,o=t[0],a=t[1],s=o[0],l=o[1],c=0,f=1,h=a[0]-s,p=a[1]-l;if(u=n-s,h||!(u>0)){if(u/=h,h<0){if(u<c)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>c&&(c=u)}if(u=r-s,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>c&&(c=u)}else if(h>0){if(u<c)return;u<f&&(f=u)}if(u=e-l,p||!(u>0)){if(u/=p,p<0){if(u<c)return;u<f&&(f=u)}else if(p>0){if(u>f)return;u>c&&(c=u)}if(u=i-l,p||!(u<0)){if(u/=p,p<0){if(u>f)return;u>c&&(c=u)}else if(p>0){if(u<c)return;u<f&&(f=u)}return!(c>0||f<1)||(c>0&&(t[0]=[s+c*h,l+c*p]),f<1&&(t[1]=[s+f*h,l+f*p]),!0)}}}}}function ku(t,n,e,r,i){var u=t[1];if(u)return!0;var o,a,s=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],g=c[1],v=(f+p)/2,d=(h+g)/2;if(g===h){if(v<n||v>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[v,e];u=[v,i]}else{if(s){if(s[1]<e)return}else s=[v,i];u=[v,e]}}else if(a=d-(o=(f-p)/(g-h))*v,o<-1||o>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(e-a)/o,e];u=[(i-a)/o,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/o,i];u=[(e-a)/o,e]}else if(h<g){if(s){if(s[0]>=r)return}else s=[n,o*n+a];u=[r,o*r+a]}else{if(s){if(s[0]<n)return}else s=[r,o*r+a];u=[n,o*n+a]}return t[0]=s,t[1]=u,!0}function Du(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Lu(t,n){return n[+(n.left!==t.site)]}function Su(t,n){return n[+(n.left===t.site)]}var Ru,Eu=[];function Pu(){wu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Yu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var o=i[0],a=i[1],s=r[0]-o,l=r[1]-a,c=u[0]-o,f=u[1]-a,h=2*(s*f-l*c);if(!(h>=-Ju)){var p=s*s+l*l,g=c*c+f*f,v=(f*p-l*g)/h,d=(s*g-c*p)/h,y=Eu.pop()||new Pu;y.arc=t,y.site=i,y.x=v+o,y.y=(y.cy=d+a)+Math.sqrt(v*v+d*d),t.circle=y;for(var _=null,m=Bu._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}Bu.insert(_,y),_||(Ru=y)}}}}function Fu(t){var n=t.circle;n&&(n.P||(Ru=n.N),Bu.remove(n),Eu.push(n),wu(n),t.circle=null)}var Hu=[];function ju(){wu(this),this.edge=this.site=this.circle=null}function qu(t){var n=Hu.pop()||new ju;return n.site=t,n}function Ou(t){Fu(t),Vu.remove(t),Hu.push(t),wu(t)}function $u(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],u=t.P,o=t.N,a=[t];Ou(t);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<Qu&&Math.abs(r-s.circle.cy)<Qu;)u=s.P,a.unshift(s),Ou(s),s=u;a.unshift(s),Fu(s);for(var l=o;l.circle&&Math.abs(e-l.circle.x)<Qu&&Math.abs(r-l.circle.cy)<Qu;)o=l.N,a.push(l),Ou(l),l=o;a.push(l),Fu(l);var c,f=a.length;for(c=1;c<f;++c)l=a[c],s=a[c-1],Nu(l.edge,s.site,l.site,i);s=a[0],(l=a[f-1]).edge=Tu(s.site,l.site,null,i),Yu(s),Yu(l)}function Xu(t){for(var n,e,r,i,u=t[0],o=t[1],a=Vu._;a;)if((r=zu(a,o)-u)>Qu)a=a.L;else{if(!((i=u-Iu(a,o))>Qu)){r>-Qu?(n=a.P,e=a):i>-Qu?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Zu[t.index]={site:t,halfedges:[]}}(t);var s=qu(t);if(Vu.insert(n,s),n||e){if(n===e)return Fu(n),e=qu(n.site),Vu.insert(s,e),s.edge=e.edge=Tu(n.site,s.site),Yu(n),void Yu(e);if(e){Fu(n),Fu(e);var l=n.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,g=e.site,v=g[0]-c,d=g[1]-f,y=2*(h*d-p*v),_=h*h+p*p,m=v*v+d*d,w=[(d*_-p*m)/y+c,(h*m-v*_)/y+f];Nu(e.edge,l,g,w),s.edge=Tu(l,t,null,w),e.edge=Tu(t,g,null,w),Yu(n),Yu(e)}else s.edge=Tu(n.site,s.site)}}function zu(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],s=e[1],l=s-n;if(!l)return a;var c=a-r,f=1/u-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-u/2)))/f+r:(r+a)/2}function Iu(t,n){var e=t.N;if(e)return zu(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Vu,Zu,Bu,Wu,Qu=1e-6,Ju=1e-12;function Gu(t,n){return n[1]-t[1]||n[0]-t[0]}function Ku(t,n){var e,r,i,u=t.sort(Gu).pop();for(Wu=[],Zu=new Array(t.length),Vu=new Cu,Bu=new Cu;;)if(i=Ru,u&&(!i||u[1]<i.y||u[1]===i.y&&u[0]<i.x))u[0]===e&&u[1]===r||(Xu(u),e=u[0],r=u[1]),u=t.pop();else{if(!i)break;$u(i.arc)}if(function(){for(var t,n,e,r,i=0,u=Zu.length;i<u;++i)if((t=Zu[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=Du(t,Wu[n[e]]);for(o.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],s=+n[1][0],l=+n[1][1];!function(t,n,e,r){for(var i,u=Wu.length;u--;)ku(i=Wu[u],t,n,e,r)&&Uu(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Qu||Math.abs(i[0][1]-i[1][1])>Qu)||delete Wu[u]}(o,a,s,l),function(t,n,e,r){var i,u,o,a,s,l,c,f,h,p,g,v,d=Zu.length,y=!0;for(i=0;i<d;++i)if(u=Zu[i]){for(o=u.site,a=(s=u.halfedges).length;a--;)Wu[s[a]]||s.splice(a,1);for(a=0,l=s.length;a<l;)g=(p=Su(u,Wu[s[a]]))[0],v=p[1],f=(c=Lu(u,Wu[s[++a%l]]))[0],h=c[1],(Math.abs(g-f)>Qu||Math.abs(v-h)>Qu)&&(s.splice(a,0,Wu.push(Au(o,p,Math.abs(g-t)<Qu&&r-v>Qu?[t,Math.abs(f-t)<Qu?h:r]:Math.abs(v-r)<Qu&&e-g>Qu?[Math.abs(h-r)<Qu?f:e,r]:Math.abs(g-e)<Qu&&v-n>Qu?[e,Math.abs(f-e)<Qu?h:n]:Math.abs(v-n)<Qu&&g-t>Qu?[Math.abs(h-n)<Qu?f:t,n]:null))-1),++l);l&&(y=!1)}if(y){var _,m,w,x=1/0;for(i=0,y=null;i<d;++i)(u=Zu[i])&&(w=(_=(o=u.site)[0]-t)*_+(m=o[1]-n)*m)<x&&(x=w,y=u);if(y){var M=[t,n],b=[t,r],C=[e,r],T=[e,n];y.halfedges.push(Wu.push(Au(o=y.site,M,b))-1,Wu.push(Au(o,b,C))-1,Wu.push(Au(o,C,T))-1,Wu.push(Au(o,T,M))-1)}}for(i=0;i<d;++i)(u=Zu[i])&&(u.halfedges.length||delete Zu[i])}(o,a,s,l)}this.edges=Wu,this.cells=Zu,Vu=Bu=Wu=Zu=null}Ku.prototype={constructor:Ku,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Lu(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(u=(i=e.halfedges).length)for(var i,u,o,a,s,l,c=e.site,f=-1,h=n[i[u-1]],p=h.left===c?h.right:h.left;++f<u;)o=p,p=(h=n[i[f]]).left===c?h.right:h.left,o&&p&&r<o.index&&r<p.index&&(s=o,l=p,((a=c)[0]-l[0])*(s[1]-a[1])-(a[0]-s[0])*(l[1]-a[1])<0)&&t.push([c.data,o.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,u=this,o=u._found||0,a=u.cells.length;!(i=u.cells[o]);)if(++o>=a)return null;var s=t-i.site[0],l=n-i.site[1],c=s*s+l*l;do{i=u.cells[r=o],o=null,i.halfedges.forEach((function(e){var r=u.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],l=n-a[1],f=s*s+l*l;f<c&&(c=f,o=a.index)}}))}while(null!==o);return u._found=r,null==e||c<=e*e?i.site:null}};Math.SQRT2;function to(t,n,e){this.k=t,this.x=n,this.y=e}to.prototype={constructor:to,scale:function(t){return 1===t?this:new to(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new to(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new to(1,0,0);to.prototype;e(3),e(2),e(6),e(10),e(11),e(7),e(13),e(14),e(1),e(12),e(15),e(8),e(16),e(0),e(17),e(4),e(9),e(5);async function no(){console.log([1,2,3])}e.d(n,"loadData",(function(){return no}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,