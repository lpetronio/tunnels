var ancestrySuiteVisualization=function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=109)}({109:function(t,n,e){const r=e(110);t.exports=r},110:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}};var u=i(r);u.right,u.left;var o=Array.prototype;o.slice,o.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);Array.prototype.slice;var a={value:function(){}};function s(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new c(r)}function c(t){this._=t}function l(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function f(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function h(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=a,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}c.prototype=s.prototype={constructor:c,on:function(t,n){var e,r=this._,i=l(t+"",r),u=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<o;)if(e=(t=i[u]).type)r[e]=h(r[e],t.name,n);else if(null==n)for(e in r)r[e]=h(r[e],t.name,null);return this}for(;++u<o;)if((e=(t=i[u]).type)&&(e=f(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new c(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),u=0;u<e;++u)i[u]=arguments[u+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(u=0,e=(r=this._[t]).length;u<e;++u)r[u].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,u=r.length;i<u;++i)r[i].value.apply(n,e)}};var p=s;function g(){}var v=function(t){return null==t?g:function(){return this.querySelector(t)}};function d(){return[]}var y=function(t){return null==t?d:function(){return this.querySelectorAll(t)}},_=function(t){return function(){return this.matches(t)}},m=function(t){return new Array(t.length)};function w(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}w.prototype={constructor:w,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function x(t,n,e,r,i,u){for(var o,a=0,s=n.length,c=u.length;a<c;++a)(o=n[a])?(o.__data__=u[a],r[a]=o):e[a]=new w(t,u[a]);for(;a<s;++a)(o=n[a])&&(i[a]=o)}function b(t,n,e,r,i,u,o){var a,s,c,l={},f=n.length,h=u.length,p=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(p[a]=c="$"+o.call(s,s.__data__,a,n),c in l?i[a]=s:l[c]=s);for(a=0;a<h;++a)(s=l[c="$"+o.call(t,u[a],a,u)])?(r[a]=s,s.__data__=u[a],l[c]=null):e[a]=new w(t,u[a]);for(a=0;a<f;++a)(s=n[a])&&l[p[a]]===s&&(i[a]=s)}function M(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var C="http://www.w3.org/1999/xhtml",T={svg:"http://www.w3.org/2000/svg",xhtml:C,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},A=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),T.hasOwnProperty(n)?{space:T[n],local:t}:t};function N(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function k(t,n){return function(){this.setAttribute(t,n)}}function D(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function L(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function S(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var R=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t){return function(){this.style.removeProperty(t)}}function P(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Y(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function F(t,n){return t.style.getPropertyValue(n)||R(t).getComputedStyle(t,null).getPropertyValue(n)}function H(t){return function(){delete this[t]}}function j(t,n){return function(){this[t]=n}}function q(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function O(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new X(t)}function X(t){this._node=t,this._names=O(t.getAttribute("class")||"")}function z(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function I(t,n){for(var e=$(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function V(t){return function(){z(this,t)}}function Z(t){return function(){I(this,t)}}function B(t,n){return function(){(n.apply(this,arguments)?z:I)(this,t)}}X.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function W(){this.textContent=""}function Q(t){return function(){this.textContent=t}}function J(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function G(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function tt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function nt(){this.nextSibling&&this.parentNode.appendChild(this)}function et(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function rt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===C&&n.documentElement.namespaceURI===C?n.createElement(t):n.createElementNS(e,t)}}function it(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ut=function(t){var n=A(t);return(n.local?it:rt)(n)};function ot(){return null}function at(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ct(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var lt={},ft=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(lt={mouseenter:"mouseover",mouseleave:"mouseout"}));function ht(t,n,e){return t=pt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function pt(t,n,e){return function(r){var i=ft;ft=r;try{t.call(this,this.__data__,n,e)}finally{ft=i}}}function gt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function vt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,u=n.length;r<u;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function dt(t,n,e){var r=lt.hasOwnProperty(t.type)?ht:pt;return function(i,u,o){var a,s=this.__on,c=r(n,u,o);if(s)for(var l=0,f=s.length;l<f;++l)if((a=s[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(a):this.__on=[a]}}function yt(t,n,e){var r=R(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function _t(t,n){return function(){return yt(this,t,n)}}function mt(t,n){return function(){return yt(this,t,n.apply(this,arguments))}}var wt=[null];function xt(t,n){this._groups=t,this._parents=n}function bt(){return new xt([[document.documentElement]],wt)}xt.prototype=bt.prototype={constructor:xt,select:function(t){"function"!=typeof t&&(t=v(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o,a=n[i],s=a.length,c=r[i]=new Array(s),l=0;l<s;++l)(u=a[l])&&(o=t.call(u,u.__data__,l,a))&&("__data__"in u&&(o.__data__=u.__data__),c[l]=o);return new xt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=y(t));for(var n=this._groups,e=n.length,r=[],i=[],u=0;u<e;++u)for(var o,a=n[u],s=a.length,c=0;c<s;++c)(o=a[c])&&(r.push(t.call(o,o.__data__,c,a)),i.push(o));return new xt(r,i)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],c=0;c<a;++c)(u=o[c])&&t.call(u,u.__data__,c,o)&&s.push(u);return new xt(r,this._parents)},data:function(t,n){if(!t)return g=new Array(this.size()),l=-1,this.each((function(t){g[++l]=t})),g;var e,r=n?b:x,i=this._parents,u=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=u.length,a=new Array(o),s=new Array(o),c=new Array(o),l=0;l<o;++l){var f=i[l],h=u[l],p=h.length,g=t.call(f,f&&f.__data__,l,i),v=g.length,d=s[l]=new Array(v),y=a[l]=new Array(v);r(f,h,d,y,c[l]=new Array(p),g,n);for(var _,m,w=0,M=0;w<v;++w)if(_=d[w]){for(w>=M&&(M=w+1);!(m=y[M])&&++M<v;);_._next=m||null}}return(a=new xt(a,i))._enter=s,a._exit=c,a},enter:function(){return new xt(this._enter||this._groups.map(m),this._parents)},exit:function(){return new xt(this._exit||this._groups.map(m),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,u=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?u.remove():e(u),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,c=n[a],l=e[a],f=c.length,h=o[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)o[a]=n[a];return new xt(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],u=i.length-1,o=i[u];--u>=0;)(r=i[u])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=M);for(var e=this._groups,r=e.length,i=new Array(r),u=0;u<r;++u){for(var o,a=e[u],s=a.length,c=i[u]=new Array(s),l=0;l<s;++l)(o=a[l])&&(c[l]=o);c.sort(n)}return new xt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,u=r.length;i<u;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,u=n[e],o=0,a=u.length;o<a;++o)(i=u[o])&&t.call(i,i.__data__,o,u);return this},attr:function(t,n){var e=A(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?U:N:"function"==typeof n?e.local?S:L:e.local?D:k)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?E:"function"==typeof n?Y:P)(t,n,null==e?"":e)):F(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?H:"function"==typeof n?q:j)(t,n)):this.node()[t]},classed:function(t,n){var e=O(t+"");if(arguments.length<2){for(var r=$(this.node()),i=-1,u=e.length;++i<u;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?B:n?V:Z)(e,n))},text:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?J:Q)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?tt:K)(t)):this.node().innerHTML},raise:function(){return this.each(nt)},lower:function(){return this.each(et)},append:function(t){var n="function"==typeof t?t:ut(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:ut(t),r=null==n?ot:"function"==typeof n?n:v(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(at)},clone:function(t){return this.select(t?ct:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,u=gt(t+""),o=u.length;if(!(arguments.length<2)){for(a=n?dt:vt,null==e&&(e=!1),r=0;r<o;++r)this.each(a(u[r],n,e));return this}var a=this.node().__on;if(a)for(var s,c=0,l=a.length;c<l;++c)for(r=0,s=a[c];r<o;++r)if((i=u[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?mt:_t)(t,n))}};var Mt=bt;var Ct=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Tt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function At(){}var Nt="\\s*([+-]?\\d+)\\s*",Ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dt=/^#([0-9a-f]{3,8})$/,Lt=new RegExp("^rgb\\("+[Nt,Nt,Nt]+"\\)$"),St=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Rt=new RegExp("^rgba\\("+[Nt,Nt,Nt,Ut]+"\\)$"),Et=new RegExp("^rgba\\("+[kt,kt,kt,Ut]+"\\)$"),Pt=new RegExp("^hsl\\("+[Ut,kt,kt]+"\\)$"),Yt=new RegExp("^hsla\\("+[Ut,kt,kt,Ut]+"\\)$"),Ft={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ht(){return this.rgb().formatHex()}function jt(){return this.rgb().formatRgb()}function qt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Dt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Ot(n):3===e?new It(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new It(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new It(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Lt.exec(t))?new It(n[1],n[2],n[3],1):(n=St.exec(t))?new It(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rt.exec(t))?$t(n[1],n[2],n[3],n[4]):(n=Et.exec(t))?$t(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Pt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,1):(n=Yt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,n[4]):Ft.hasOwnProperty(t)?Ot(Ft[t]):"transparent"===t?new It(NaN,NaN,NaN,0):null}function Ot(t){return new It(t>>16&255,t>>8&255,255&t,1)}function $t(t,n,e,r){return r<=0&&(t=n=e=NaN),new It(t,n,e,r)}function Xt(t){return t instanceof At||(t=qt(t)),t?new It((t=t.rgb()).r,t.g,t.b,t.opacity):new It}function zt(t,n,e,r){return 1===arguments.length?Xt(t):new It(t,n,e,null==r?1:r)}function It(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Vt(){return"#"+Bt(this.r)+Bt(this.g)+Bt(this.b)}function Zt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Bt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Wt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Jt(t,n,e,r)}function Qt(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=qt(t)),!t)return new Jt;if(t instanceof Jt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),u=Math.max(n,e,r),o=NaN,a=u-i,s=(u+i)/2;return a?(o=n===u?(e-r)/a+6*(e<r):e===u?(r-n)/a+2:(n-e)/a+4,a/=s<.5?u+i:2-u-i,o*=60):a=s>0&&s<1?0:o,new Jt(o,a,s,t.opacity)}function Jt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Gt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Kt(t,n,e,r,i){var u=t*t,o=u*t;return((1-3*t+3*u-o)*n+(4-6*u+3*o)*e+(1+3*t+3*u-3*o)*r+o*i)/6}Ct(At,qt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ht,formatHex:Ht,formatHsl:function(){return Qt(this).formatHsl()},formatRgb:jt,toString:jt}),Ct(It,zt,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Vt,formatHex:Vt,formatRgb:Zt,toString:Zt})),Ct(Jt,(function(t,n,e,r){return 1===arguments.length?Qt(t):new Jt(t,n,e,null==r?1:r)}),Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new It(Gt(t>=240?t-240:t+120,i,r),Gt(t,i,r),Gt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var tn=function(t){return function(){return t}};function nn(t,n){return function(e){return t+e*n}}function en(t){return 1==(t=+t)?rn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):tn(isNaN(n)?e:n)}}function rn(t,n){var e=n-t;return e?nn(t,e):tn(isNaN(t)?n:t)}var un=function t(n){var e=en(n);function r(t,n){var r=e((t=zt(t)).r,(n=zt(n)).r),i=e(t.g,n.g),u=e(t.b,n.b),o=rn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=u(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function on(t){return function(n){var e,r,i=n.length,u=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=zt(n[e]),u[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return u=t(u),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=u(t),r.g=o(t),r.b=a(t),r+""}}}var an=on((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],u=t[r+1],o=r>0?t[r-1]:2*i-u,a=r<n-1?t[r+2]:2*u-i;return Kt((e-r/n)*n,o,i,u,a)}}));on((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],u=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return Kt((e-r/n)*n,i,u,o,a)}}));var sn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},cn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ln=new RegExp(cn.source,"g");var fn,hn,pn=function(t,n){var e,r,i,u=cn.lastIndex=ln.lastIndex=0,o=-1,a=[],s=[];for(t+="",n+="";(e=cn.exec(t))&&(r=ln.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,s.push({i:o,x:sn(e,r)})),u=ln.lastIndex;return u<n.length&&(i=n.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},gn=0,vn=0,dn=0,yn=0,_n=0,mn=0,wn="object"==typeof performance&&performance.now?performance:Date,xn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function bn(){return _n||(xn(Mn),_n=wn.now()+mn)}function Mn(){_n=0}function Cn(){this._call=this._time=this._next=null}function Tn(t,n,e){var r=new Cn;return r.restart(t,n,e),r}function An(){_n=(yn=wn.now())+mn,gn=vn=0;try{!function(){bn(),++gn;for(var t,n=fn;n;)(t=_n-n._time)>=0&&n._call.call(null,t),n=n._next;--gn}()}finally{gn=0,function(){var t,n,e=fn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:fn=n);hn=t,Un(r)}(),_n=0}}function Nn(){var t=wn.now(),n=t-yn;n>1e3&&(mn-=n,yn=t)}function Un(t){gn||(vn&&(vn=clearTimeout(vn)),t-_n>24?(t<1/0&&(vn=setTimeout(An,t-wn.now()-mn)),dn&&(dn=clearInterval(dn))):(dn||(yn=wn.now(),dn=setInterval(Nn,1e3)),gn=1,xn(An)))}Cn.prototype=Tn.prototype={constructor:Cn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?bn():+e)+(null==n?0:+n),this._next||hn===this||(hn?hn._next=this:fn=this,hn=this),this._call=t,this._time=e,Un()},stop:function(){this._call&&(this._call=null,this._time=1/0,Un())}};var kn=function(t,n,e){var r=new Cn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Dn=p("start","end","cancel","interrupt"),Ln=[],Sn=function(t,n,e,r,i,u){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function u(s){var c,l,f,h;if(1!==e.state)return a();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return kn(u);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(kn((function(){3===e.state&&(e.state=4,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),u=-1,o=r.length;++u<o;)r[u].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Tn((function(t){e.state=1,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Dn,tween:Ln,time:u.time,delay:u.delay,duration:u.duration,ease:u.ease,timer:null,state:0})};function Rn(t,n){var e=Pn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function En(t,n){var e=Pn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Pn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Yn,Fn,Hn,jn,qn=function(t,n){var e,r,i,u=t.__transition,o=!0;if(u){for(i in n=null==n?null:n+"",u)(e=u[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete u[i]):o=!1;o&&delete t.__transition}},On=180/Math.PI,$n={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Xn=function(t,n,e,r,i,u){var o,a,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:u,rotate:Math.atan2(n,t)*On,skewX:Math.atan(s)*On,scaleX:o,scaleY:a}};function zn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(u,o){var a=[],s=[];return u=t(u),o=t(o),function(t,r,i,u,o,a){if(t!==i||r!==u){var s=o.push("translate(",null,n,null,e);a.push({i:s-4,x:sn(t,i)},{i:s-2,x:sn(r,u)})}else(i||u)&&o.push("translate("+i+n+u+e)}(u.translateX,u.translateY,o.translateX,o.translateY,a,s),function(t,n,e,u){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),u.push({i:e.push(i(e)+"rotate(",null,r)-2,x:sn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(u.rotate,o.rotate,a,s),function(t,n,e,u){t!==n?u.push({i:e.push(i(e)+"skewX(",null,r)-2,x:sn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(u.skewX,o.skewX,a,s),function(t,n,e,r,u,o){if(t!==e||n!==r){var a=u.push(i(u)+"scale(",null,",",null,")");o.push({i:a-4,x:sn(t,e)},{i:a-2,x:sn(n,r)})}else 1===e&&1===r||u.push(i(u)+"scale("+e+","+r+")")}(u.scaleX,u.scaleY,o.scaleX,o.scaleY,a,s),u=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var In=zn((function(t){return"none"===t?$n:(Yn||(Yn=document.createElement("DIV"),Fn=document.documentElement,Hn=document.defaultView),Yn.style.transform=t,t=Hn.getComputedStyle(Fn.appendChild(Yn),null).getPropertyValue("transform"),Fn.removeChild(Yn),t=t.slice(7,-1).split(","),Xn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Vn=zn((function(t){return null==t?$n:(jn||(jn=document.createElementNS("http://www.w3.org/2000/svg","g")),jn.setAttribute("transform",t),(t=jn.transform.baseVal.consolidate())?(t=t.matrix,Xn(t.a,t.b,t.c,t.d,t.e,t.f)):$n)}),", ",")",")");function Zn(t,n){var e,r;return function(){var i=En(this,t),u=i.tween;if(u!==e)for(var o=0,a=(r=e=u).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function Bn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var u=En(this,t),o=u.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=a;break}s===c&&i.push(a)}u.tween=i}}function Wn(t,n,e){var r=t._id;return t.each((function(){var t=En(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Pn(t,r).value[n]}}var Qn=function(t,n){var e;return("number"==typeof n?sn:n instanceof qt?un:(e=qt(n))?(n=e,un):pn)(t,n)};function Jn(t){return function(){this.removeAttribute(t)}}function Gn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Kn(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttribute(t);return o===u?null:o===r?i:i=n(r=o,e)}}function te(t,n,e){var r,i,u=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===u?null:o===r?i:i=n(r=o,e)}}function ne(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttribute(t)}}function ee(t,n,e){var r,i,u;return function(){var o,a,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:o===r&&a===i?u:(i=a,u=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function re(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ie(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function ue(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ie(t,i)),e}return i._value=n,i}function oe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&re(t,i)),e}return i._value=n,i}function ae(t,n){return function(){Rn(this,t).delay=+n.apply(this,arguments)}}function se(t,n){return n=+n,function(){Rn(this,t).delay=n}}function ce(t,n){return function(){En(this,t).duration=+n.apply(this,arguments)}}function le(t,n){return n=+n,function(){En(this,t).duration=n}}function fe(t,n){if("function"!=typeof n)throw new Error;return function(){En(this,t).ease=n}}function he(t,n,e){var r,i,u=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Rn:En;return function(){var o=u(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}var pe=Mt.prototype.constructor;function ge(t){return function(){this.style.removeProperty(t)}}function ve(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function de(t,n,e){var r,i;function u(){var u=n.apply(this,arguments);return u!==i&&(r=(i=u)&&ve(t,u,e)),r}return u._value=n,u}function ye(t){return function(n){this.textContent=t.call(this,n)}}function _e(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&ye(r)),n}return r._value=t,r}var me=0;function we(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function xe(){return++me}var be=Mt.prototype;we.prototype=function(t){return Mt().transition(t)}.prototype={constructor:we,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=v(t));for(var r=this._groups,i=r.length,u=new Array(i),o=0;o<i;++o)for(var a,s,c=r[o],l=c.length,f=u[o]=new Array(l),h=0;h<l;++h)(a=c[h])&&(s=t.call(a,a.__data__,h,c))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,Sn(f[h],n,e,h,f,Pn(a,e)));return new we(u,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,i=r.length,u=[],o=[],a=0;a<i;++a)for(var s,c=r[a],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,p=t.call(s,s.__data__,f,c),g=Pn(s,e),v=0,d=p.length;v<d;++v)(h=p[v])&&Sn(h,n,e,v,p,g);u.push(p),o.push(s)}return new we(u,o,n,e)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,s=r[i]=[],c=0;c<a;++c)(u=o[c])&&t.call(u,u.__data__,c,o)&&s.push(u);return new we(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var s,c=n[a],l=e[a],f=c.length,h=o[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)o[a]=n[a];return new we(o,this._parents,this._name,this._id)},selection:function(){return new pe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=xe(),r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,c=0;c<s;++c)if(o=a[c]){var l=Pn(o,n);Sn(o,t,e,c,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new we(r,this._parents,t,e)},call:be.call,nodes:be.nodes,node:be.node,size:be.size,empty:be.empty,each:be.each,on:function(t,n){var e=this._id;return arguments.length<2?Pn(this.node(),e).on.on(t):this.each(he(e,t,n))},attr:function(t,n){var e=A(t),r="transform"===e?Vn:Qn;return this.attrTween(t,"function"==typeof n?(e.local?ee:ne)(e,r,Wn(this,"attr."+t,n)):null==n?(e.local?Gn:Jn)(e):(e.local?te:Kn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=A(t);return this.tween(e,(r.local?ue:oe)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?In:Qn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var u=F(this,t),o=(this.style.removeProperty(t),F(this,t));return u===o?null:u===e&&o===r?i:i=n(e=u,r=o)}}(t,r)).on("end.style."+t,ge(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,u;return function(){var o=F(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=F(this,t)),o===s?null:o===r&&s===i?u:(i=s,u=n(r=o,a))}}(t,r,Wn(this,"style."+t,n))).each(function(t,n){var e,r,i,u,o="style."+n,a="end."+o;return function(){var s=En(this,t),c=s.on,l=null==s.value[o]?u||(u=ge(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(a,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,u=e+"";return function(){var o=F(this,t);return o===u?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,de(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Wn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,_e(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Pn(this.node(),e).tween,u=0,o=i.length;u<o;++u)if((r=i[u]).name===t)return r.value;return null}return this.each((null==n?Zn:Bn)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ae:se)(n,t)):Pn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ce:le)(n,t)):Pn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(fe(n,t)):Pn(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(u,o){var a={value:o},s={value:function(){0==--i&&u()}};e.each((function(){var e=En(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var Me={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ce(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Me.time=bn(),Me;return e}Mt.prototype.interrupt=function(t){return this.each((function(){qn(this,t)}))},Mt.prototype.transition=function(t){var n,e;t instanceof we?(n=t._id,t=t._name):(n=xe(),(e=Me).time=bn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],s=a.length,c=0;c<s;++c)(o=a[c])&&Sn(o,t,n,c,a,e||Ce(o,n));return new we(r,this._parents,t,n)};function Te(t){return[+t[0],+t[1]]}function Ae(t){return[Te(t[0]),Te(t[1])]}["w","e"].map(Ne),["n","s"].map(Ne),["n","w","e","s","nw","ne","sw","se"].map(Ne);function Ne(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ue=Math.PI,ke=2*Ue,De=ke-1e-6;function Le(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Se(){return new Le}Le.prototype=Se.prototype={constructor:Le,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+u)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var u=this._x1,o=this._y1,a=e-t,s=r-n,c=u-t,l=o-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*a-s*c)>1e-6&&i){var h=e-u,p=r-o,g=a*a+s*s,v=h*h+p*p,d=Math.sqrt(g),y=Math.sqrt(f),_=i*Math.tan((Ue-Math.acos((g+f-v)/(2*d*y)))/2),m=_/y,w=_/d;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*c)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+w*a)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,u){t=+t,n=+n,u=!!u;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+o,c=n+a,l=1^u,f=u?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%ke+ke),f>De?this._+="A"+e+","+e+",0,1,"+l+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Ue)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Re(){}function Ee(t,n){var e=new Re;if(t instanceof Re)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,u=t.length;if(null==n)for(;++i<u;)e.set(i,t[i]);else for(;++i<u;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}Re.prototype=Ee.prototype={constructor:Re,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Pe=Ee;function Ye(){}var Fe=Pe.prototype;function He(t,n){var e=new Ye;if(t instanceof Ye)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Ye.prototype=He.prototype={constructor:Ye,has:Fe.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Fe.remove,clear:Fe.clear,values:Fe.keys,size:Fe.size,empty:Fe.empty,each:Fe.each};Array.prototype.slice;var je={},qe={};function Oe(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function $e(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function Xe(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ze(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),u=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Xe(-n,6):n>9999?"+"+Xe(n,6):Xe(n,4))+"-"+Xe(t.getUTCMonth()+1,2)+"-"+Xe(t.getUTCDate(),2)+(u?"T"+Xe(e,2)+":"+Xe(r,2)+":"+Xe(i,2)+"."+Xe(u,3)+"Z":i?"T"+Xe(e,2)+":"+Xe(r,2)+":"+Xe(i,2)+"Z":r||e?"T"+Xe(e,2)+":"+Xe(r,2)+"Z":"")}var Ie=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],u=t.length,o=0,a=0,s=u<=0,c=!1;function l(){if(s)return qe;if(c)return c=!1,je;var n,r,i=o;if(34===t.charCodeAt(i)){for(;o++<u&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(n=o)>=u?s=!0:10===(r=t.charCodeAt(o++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(o)&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<u;){if(10===(r=t.charCodeAt(n=o++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(o)&&++o;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,u)}for(10===t.charCodeAt(u-1)&&--u,13===t.charCodeAt(u-1)&&--u;(r=l())!==qe;){for(var f=[];r!==je&&r!==qe;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))}function u(n){return n.map(o).join(t)}function o(t){return null==t?"":t instanceof Date?ze(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,u=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Oe(t);return function(r,i){return n(e(r),i,t)}}(t,n):Oe(t)}));return u.columns=i||[],u},parseRows:r,format:function(n,e){return null==e&&(e=$e(n)),[e.map(o).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=$e(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(u).join("\n")},formatRow:u,formatValue:o}},Ve=Ie(","),Ze=Ve.parse,Be=(Ve.parseRows,Ve.format,Ve.formatBody,Ve.formatRows,Ve.formatRow,Ve.formatValue,Ie("\t")),We=Be.parse;Be.parseRows,Be.format,Be.formatBody,Be.formatRows,Be.formatRow,Be.formatValue;function Qe(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Je=function(t,n){return fetch(t,n).then(Qe)};function Ge(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Je(n,e).then((function(n){return t(n,r)}))}}Ge(Ze),Ge(We);function Ke(t){return function(n,e){return Je(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Ke("application/xml"),Ke("text/html"),Ke("image/svg+xml");function tr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,u,o,a,s,c,l,f,h,p=t._root,g={data:r},v=t._x0,d=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=g,t;for(;p.length;)if((c=n>=(u=(v+y)/2))?v=u:y=u,(l=e>=(o=(d+_)/2))?d=o:_=o,i=p,!(p=p[f=l<<1|c]))return i[f]=g,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return g.next=p,i?i[f]=g:t._root=g,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(u=(v+y)/2))?v=u:y=u,(l=e>=(o=(d+_)/2))?d=o:_=o}while((f=l<<1|c)==(h=(s>=o)<<1|a>=u));return i[h]=p,i[f]=g,t}var nr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function er(t){return t[0]}function rr(t){return t[1]}function ir(t,n,e){var r=new ur(null==n?er:n,null==e?rr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ur(t,n,e,r,i,u){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=u,this._root=void 0}function or(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ar=ir.prototype=ur.prototype;ar.copy=function(){var t,n,e=new ur(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=or(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=or(n));return e},ar.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return tr(this.cover(n,e),n,e,t)},ar.addAll=function(t){var n,e,r,i,u=t.length,o=new Array(u),a=new Array(u),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<u;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),e=0;e<u;++e)tr(this,o[e],a[e],t[e]);return this},ar.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,u=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,u=(r=Math.floor(n))+1;else{for(var o,a,s=i-e,c=this._root;e>t||t>=i||r>n||n>=u;)switch(a=(n<r)<<1|t<e,(o=new Array(4))[a]=c,c=o,s*=2,a){case 0:i=e+s,u=r+s;break;case 1:e=i-s,u=r+s;break;case 2:i=e+s,r=u-s;break;case 3:e=i-s,r=u-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=u,this},ar.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ar.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ar.find=function(t,n,e){var r,i,u,o,a,s,c,l=this._x0,f=this._y0,h=this._x1,p=this._y1,g=[],v=this._root;for(v&&g.push(new nr(v,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);s=g.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(u=s.y0)>p||(o=s.x1)<l||(a=s.y1)<f))if(v.length){var d=(i+o)/2,y=(u+a)/2;g.push(new nr(v[3],d,y,o,a),new nr(v[2],i,y,d,a),new nr(v[1],d,u,o,y),new nr(v[0],i,u,d,y)),(c=(n>=y)<<1|t>=d)&&(s=g[g.length-1],g[g.length-1]=g[g.length-1-c],g[g.length-1-c]=s)}else{var _=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),w=_*_+m*m;if(w<e){var x=Math.sqrt(e=w);l=t-x,f=n-x,h=t+x,p=n+x,r=v.data}}return r},ar.remove=function(t){if(isNaN(u=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,u,o,a,s,c,l,f,h,p=this._root,g=this._x0,v=this._y0,d=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((c=u>=(a=(g+d)/2))?g=a:d=a,(l=o>=(s=(v+y)/2))?v=s:y=s,n=p,!(p=p[f=l<<1|c]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},ar.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ar.root=function(){return this._root},ar.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ar.visit=function(t){var n,e,r,i,u,o,a=[],s=this._root;for(s&&a.push(new nr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,u=n.x1,o=n.y1)&&s.length){var c=(r+u)/2,l=(i+o)/2;(e=s[3])&&a.push(new nr(e,c,l,u,o)),(e=s[2])&&a.push(new nr(e,r,l,c,o)),(e=s[1])&&a.push(new nr(e,c,i,u,l)),(e=s[0])&&a.push(new nr(e,r,i,c,l))}return this},ar.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new nr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var u,o=n.x0,a=n.y0,s=n.x1,c=n.y1,l=(o+s)/2,f=(a+c)/2;(u=i[0])&&e.push(new nr(u,o,a,l,f)),(u=i[1])&&e.push(new nr(u,l,a,s,f)),(u=i[2])&&e.push(new nr(u,o,f,l,c)),(u=i[3])&&e.push(new nr(u,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ar.x=function(t){return arguments.length?(this._x=t,this):this._x},ar.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var sr=function(){return Math.random()},cr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(sr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var u;if(null!=r)u=r,r=null;else do{r=2*n()-1,u=2*n()-1,i=r*r+u*u}while(!i||i>1);return t+e*u*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(sr)),lr=(function t(n){function e(){var t=cr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(sr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(sr));(function t(n){function e(t){var e=lr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(sr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(sr);var fr=Array.prototype;fr.map,fr.slice;var hr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function pr(t){if(!(n=hr.exec(t)))throw new Error("invalid format: "+t);var n;return new gr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function gr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}pr.prototype=gr.prototype,gr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var vr,dr,yr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},_r=function(t){return(t=yr(Math.abs(t)))?t[1]:NaN},mr=function(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},wr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return mr(100*t,n)},r:mr,s:function(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1],u=i-(vr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return u===o?r:u>o?r+new Array(u-o+1).join("0"):u>0?r.slice(0,u)+"."+r.slice(u):"0."+new Array(1-u).join("0")+yr(t,Math.max(0,n+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},xr=function(t){return t},br=Array.prototype.map,Mr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];dr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?xr:(n=br.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,u=[],o=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),u.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[o=(o+1)%n.length];return u.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",u=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?xr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(br.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=pr(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,v=t.comma,d=t.precision,y=t.trim,_=t.type;"n"===_?(v=!0,_="g"):wr[_]||(void 0===d&&(d=12),y=!0,_="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var m="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",w="$"===h?u:/[%p]/.test(_)?s:"",x=wr[_],b=/[defgprs%]/.test(_);function M(t){var i,u,s,h=m,M=w;if("c"===_)M=x(t)+M,t="";else{var C=(t=+t)<0;if(t=isNaN(t)?l:x(Math.abs(t),d),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),C&&0==+t&&(C=!1),h=(C?"("===f?f:c:"-"===f||"("===f?"":f)+h,M=("s"===_?Mr[8+vr/3]:"")+M+(C&&"("===f?")":""),b)for(i=-1,u=t.length;++i<u;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?o+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var T=h.length+t.length+M.length,A=T<g?new Array(g-T+1).join(n):"";switch(v&&p&&(t=r(A+t,A.length?g-M.length:1/0),A=""),e){case"<":t=h+t+M+A;break;case"=":t=h+A+t+M;break;case"^":t=A.slice(0,T=A.length>>1)+h+t+M+A.slice(T);break;default:t=A+h+t+M}return a(t)}return d=void 0===d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,n){var e=f(((t=pr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(_r(n)/3))),i=Math.pow(10,-r),u=Mr[8+r/3];return function(t){return e(i*t)+u}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),dr.format,dr.formatPrefix;var Cr=new Date,Tr=new Date;function Ar(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,u){var o,a=[];if(e=i.ceil(e),u=null==u?1:Math.floor(u),!(e<r&&u>0))return a;do{a.push(o=new Date(+e)),n(e,u),t(e)}while(o<e&&e<r);return a},i.filter=function(e){return Ar((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Cr.setTime(+n),Tr.setTime(+r),t(Cr),t(Tr),Math.floor(e(Cr,Tr))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Nr=Ar((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Nr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ar((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Ur=Nr,kr=(Nr.range,Ar((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));kr.range;function Dr(t){return Ar((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Lr=Dr(0),Sr=Dr(1),Rr=Dr(2),Er=Dr(3),Pr=Dr(4),Yr=Dr(5),Fr=Dr(6),Hr=(Lr.range,Sr.range,Rr.range,Er.range,Pr.range,Yr.range,Fr.range,Ar((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),jr=Hr,qr=(Hr.range,Ar((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Or=(qr.range,Ar((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),$r=(Or.range,Ar((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Xr=($r.range,Ar((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Xr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ar((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Xr:null};Xr.range;function zr(t){return Ar((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Ir=zr(0),Vr=zr(1),Zr=zr(2),Br=zr(3),Wr=zr(4),Qr=zr(5),Jr=zr(6),Gr=(Ir.range,Vr.range,Zr.range,Br.range,Wr.range,Qr.range,Jr.range,Ar((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Kr=Gr,ti=(Gr.range,Ar((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));ti.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ar((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var ni=ti;ti.range;function ei(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ri(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ii(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var ui,oi={"-":"",_:" ",0:"0"},ai=/^\s*\d+/,si=/^%/,ci=/[\\^$*+?|[\]().{}]/g;function li(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(n)+i:i)}function fi(t){return t.replace(ci,"\\$&")}function hi(t){return new RegExp("^(?:"+t.map(fi).join("|")+")","i")}function pi(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function gi(t,n,e){var r=ai.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function vi(t,n,e){var r=ai.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function di(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function yi(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function _i(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function mi(t,n,e){var r=ai.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function wi(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function xi(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function bi(t,n,e){var r=ai.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Mi(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Ci(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Ti(t,n,e){var r=ai.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ai(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ni(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ui(t,n,e){var r=ai.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ki(t,n,e){var r=ai.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Di(t,n,e){var r=ai.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Li(t,n,e){var r=si.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Si(t,n,e){var r=ai.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Ri(t,n,e){var r=ai.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Ei(t,n){return li(t.getDate(),n,2)}function Pi(t,n){return li(t.getHours(),n,2)}function Yi(t,n){return li(t.getHours()%12||12,n,2)}function Fi(t,n){return li(1+jr.count(Ur(t),t),n,3)}function Hi(t,n){return li(t.getMilliseconds(),n,3)}function ji(t,n){return Hi(t,n)+"000"}function qi(t,n){return li(t.getMonth()+1,n,2)}function Oi(t,n){return li(t.getMinutes(),n,2)}function $i(t,n){return li(t.getSeconds(),n,2)}function Xi(t){var n=t.getDay();return 0===n?7:n}function zi(t,n){return li(Lr.count(Ur(t)-1,t),n,2)}function Ii(t,n){var e=t.getDay();return t=e>=4||0===e?Pr(t):Pr.ceil(t),li(Pr.count(Ur(t),t)+(4===Ur(t).getDay()),n,2)}function Vi(t){return t.getDay()}function Zi(t,n){return li(Sr.count(Ur(t)-1,t),n,2)}function Bi(t,n){return li(t.getFullYear()%100,n,2)}function Wi(t,n){return li(t.getFullYear()%1e4,n,4)}function Qi(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+li(n/60|0,"0",2)+li(n%60,"0",2)}function Ji(t,n){return li(t.getUTCDate(),n,2)}function Gi(t,n){return li(t.getUTCHours(),n,2)}function Ki(t,n){return li(t.getUTCHours()%12||12,n,2)}function tu(t,n){return li(1+Kr.count(ni(t),t),n,3)}function nu(t,n){return li(t.getUTCMilliseconds(),n,3)}function eu(t,n){return nu(t,n)+"000"}function ru(t,n){return li(t.getUTCMonth()+1,n,2)}function iu(t,n){return li(t.getUTCMinutes(),n,2)}function uu(t,n){return li(t.getUTCSeconds(),n,2)}function ou(t){var n=t.getUTCDay();return 0===n?7:n}function au(t,n){return li(Ir.count(ni(t)-1,t),n,2)}function su(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Wr(t):Wr.ceil(t),li(Wr.count(ni(t),t)+(4===ni(t).getUTCDay()),n,2)}function cu(t){return t.getUTCDay()}function lu(t,n){return li(Vr.count(ni(t)-1,t),n,2)}function fu(t,n){return li(t.getUTCFullYear()%100,n,2)}function hu(t,n){return li(t.getUTCFullYear()%1e4,n,4)}function pu(){return"+0000"}function gu(){return"%"}function vu(t){return+t}function du(t){return Math.floor(+t/1e3)}!function(t){ui=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,u=t.days,o=t.shortDays,a=t.months,s=t.shortMonths,c=hi(i),l=pi(i),f=hi(u),h=pi(u),p=hi(o),g=pi(o),v=hi(a),d=pi(a),y=hi(s),_=pi(s),m={a:function(t){return o[t.getDay()]},A:function(t){return u[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Ei,e:Ei,f:ji,H:Pi,I:Yi,j:Fi,L:Hi,m:qi,M:Oi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:vu,s:du,S:$i,u:Xi,U:zi,V:Ii,w:Vi,W:Zi,x:null,X:null,y:Bi,Y:Wi,Z:Qi,"%":gu},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return u[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Ji,e:Ji,f:eu,H:Gi,I:Ki,j:tu,L:nu,m:ru,M:iu,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:vu,s:du,S:uu,u:ou,U:au,V:su,w:cu,W:lu,x:null,X:null,y:fu,Y:hu,Z:pu,"%":gu},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=g[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=d[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return C(t,n,e,r)},d:Ci,e:Ci,f:Di,H:Ai,I:Ai,j:Ti,L:ki,m:Mi,M:Ni,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},q:bi,Q:Si,s:Ri,S:Ui,u:vi,U:di,V:yi,w:gi,W:_i,x:function(t,n,r){return C(t,e,n,r)},X:function(t,n,e){return C(t,r,n,e)},y:wi,Y:mi,Z:xi,"%":Li};function b(t,n){return function(e){var r,i,u,o=[],a=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(o.push(t.slice(s,a)),null!=(i=oi[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),o.push(r),s=a+1);return o.push(t.slice(s,a)),o.join("")}}function M(t,n){return function(e){var r,i,u=ii(1900,void 0,1);if(C(u,t,e+="",0)!=e.length)return null;if("Q"in u)return new Date(u.Q);if("s"in u)return new Date(1e3*u.s+("L"in u?u.L:0));if(n&&!("Z"in u)&&(u.Z=0),"p"in u&&(u.H=u.H%12+12*u.p),void 0===u.m&&(u.m="q"in u?u.q:0),"V"in u){if(u.V<1||u.V>53)return null;"w"in u||(u.w=1),"Z"in u?(i=(r=ri(ii(u.y,0,1))).getUTCDay(),r=i>4||0===i?Vr.ceil(r):Vr(r),r=Kr.offset(r,7*(u.V-1)),u.y=r.getUTCFullYear(),u.m=r.getUTCMonth(),u.d=r.getUTCDate()+(u.w+6)%7):(i=(r=ei(ii(u.y,0,1))).getDay(),r=i>4||0===i?Sr.ceil(r):Sr(r),r=jr.offset(r,7*(u.V-1)),u.y=r.getFullYear(),u.m=r.getMonth(),u.d=r.getDate()+(u.w+6)%7)}else("W"in u||"U"in u)&&("w"in u||(u.w="u"in u?u.u%7:"W"in u?1:0),i="Z"in u?ri(ii(u.y,0,1)).getUTCDay():ei(ii(u.y,0,1)).getDay(),u.m=0,u.d="W"in u?(u.w+6)%7+7*u.W-(i+5)%7:u.w+7*u.U-(i+6)%7);return"Z"in u?(u.H+=u.Z/100|0,u.M+=u.Z%100,ri(u)):ei(u)}}function C(t,n,e,r){for(var i,u,o=0,a=n.length,s=e.length;o<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(u=x[i in oi?n.charAt(o++):i])||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=b(e,m),m.X=b(r,m),m.c=b(n,m),w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),{format:function(t){var n=b(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),ui.format,ui.parse,ui.utcFormat,ui.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var yu=Ar((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),_u=(yu.range,Ar((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),mu=(_u.range,Ar((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));mu.range;var wu,xu=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map((function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}));an((wu=xu)[wu.length-1]),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,Math.PI;function bu(){this._=null}function Mu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Cu(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Tu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Au(t){for(;t.L;)t=t.L;return t}bu.prototype={constructor:bu,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Au(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Cu(this,e),e=(t=e).U),e.C=!1,r.C=!0,Tu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Tu(this,e),e=(t=e).U),e.C=!1,r.C=!0,Cu(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,o=t.R;if(e=u?o?Au(o):u:o,i?i.L===t?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Cu(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Tu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Cu(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Tu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Cu(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Tu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Nu=bu;function Uu(t,n,e,r){var i=[null,null],u=Gu.push(i)-1;return i.left=t,i.right=n,e&&Du(i,t,n,e),r&&Du(i,n,t,r),Qu[t.index].halfedges.push(u),Qu[n.index].halfedges.push(u),i}function ku(t,n,e){var r=[n,e];return r.left=t,r}function Du(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Lu(t,n,e,r,i){var u,o=t[0],a=t[1],s=o[0],c=o[1],l=0,f=1,h=a[0]-s,p=a[1]-c;if(u=n-s,h||!(u>0)){if(u/=h,h<0){if(u<l)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>l&&(l=u)}if(u=r-s,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>l&&(l=u)}else if(h>0){if(u<l)return;u<f&&(f=u)}if(u=e-c,p||!(u>0)){if(u/=p,p<0){if(u<l)return;u<f&&(f=u)}else if(p>0){if(u>f)return;u>l&&(l=u)}if(u=i-c,p||!(u<0)){if(u/=p,p<0){if(u>f)return;u>l&&(l=u)}else if(p>0){if(u<l)return;u<f&&(f=u)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*p]),f<1&&(t[1]=[s+f*h,c+f*p]),!0)}}}}}function Su(t,n,e,r,i){var u=t[1];if(u)return!0;var o,a,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],p=l[0],g=l[1],v=(f+p)/2,d=(h+g)/2;if(g===h){if(v<n||v>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[v,e];u=[v,i]}else{if(s){if(s[1]<e)return}else s=[v,i];u=[v,e]}}else if(a=d-(o=(f-p)/(g-h))*v,o<-1||o>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(e-a)/o,e];u=[(i-a)/o,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/o,i];u=[(e-a)/o,e]}else if(h<g){if(s){if(s[0]>=r)return}else s=[n,o*n+a];u=[r,o*r+a]}else{if(s){if(s[0]<n)return}else s=[r,o*r+a];u=[n,o*n+a]}return t[0]=s,t[1]=u,!0}function Ru(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Eu(t,n){return n[+(n.left!==t.site)]}function Pu(t,n){return n[+(n.left===t.site)]}var Yu,Fu=[];function Hu(){Mu(this),this.x=this.y=this.arc=this.site=this.cy=null}function ju(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var o=i[0],a=i[1],s=r[0]-o,c=r[1]-a,l=u[0]-o,f=u[1]-a,h=2*(s*f-c*l);if(!(h>=-to)){var p=s*s+c*c,g=l*l+f*f,v=(f*p-c*g)/h,d=(s*g-l*p)/h,y=Fu.pop()||new Hu;y.arc=t,y.site=i,y.x=v+o,y.y=(y.cy=d+a)+Math.sqrt(v*v+d*d),t.circle=y;for(var _=null,m=Ju._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}Ju.insert(_,y),_||(Yu=y)}}}}function qu(t){var n=t.circle;n&&(n.P||(Yu=n.N),Ju.remove(n),Fu.push(n),Mu(n),t.circle=null)}var Ou=[];function $u(){Mu(this),this.edge=this.site=this.circle=null}function Xu(t){var n=Ou.pop()||new $u;return n.site=t,n}function zu(t){qu(t),Wu.remove(t),Ou.push(t),Mu(t)}function Iu(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],u=t.P,o=t.N,a=[t];zu(t);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<Ku&&Math.abs(r-s.circle.cy)<Ku;)u=s.P,a.unshift(s),zu(s),s=u;a.unshift(s),qu(s);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Ku&&Math.abs(r-c.circle.cy)<Ku;)o=c.N,a.push(c),zu(c),c=o;a.push(c),qu(c);var l,f=a.length;for(l=1;l<f;++l)c=a[l],s=a[l-1],Du(c.edge,s.site,c.site,i);s=a[0],(c=a[f-1]).edge=Uu(s.site,c.site,null,i),ju(s),ju(c)}function Vu(t){for(var n,e,r,i,u=t[0],o=t[1],a=Wu._;a;)if((r=Zu(a,o)-u)>Ku)a=a.L;else{if(!((i=u-Bu(a,o))>Ku)){r>-Ku?(n=a.P,e=a):i>-Ku?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Qu[t.index]={site:t,halfedges:[]}}(t);var s=Xu(t);if(Wu.insert(n,s),n||e){if(n===e)return qu(n),e=Xu(n.site),Wu.insert(s,e),s.edge=e.edge=Uu(n.site,s.site),ju(n),void ju(e);if(e){qu(n),qu(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,p=t[1]-f,g=e.site,v=g[0]-l,d=g[1]-f,y=2*(h*d-p*v),_=h*h+p*p,m=v*v+d*d,w=[(d*_-p*m)/y+l,(h*m-v*_)/y+f];Du(e.edge,c,g,w),s.edge=Uu(c,t,null,w),e.edge=Uu(t,g,null,w),ju(n),ju(e)}else s.edge=Uu(n.site,s.site)}}function Zu(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],s=e[1],c=s-n;if(!c)return a;var l=a-r,f=1/u-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-u/2)))/f+r:(r+a)/2}function Bu(t,n){var e=t.N;if(e)return Zu(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Wu,Qu,Ju,Gu,Ku=1e-6,to=1e-12;function no(t,n){return n[1]-t[1]||n[0]-t[0]}function eo(t,n){var e,r,i,u=t.sort(no).pop();for(Gu=[],Qu=new Array(t.length),Wu=new Nu,Ju=new Nu;;)if(i=Yu,u&&(!i||u[1]<i.y||u[1]===i.y&&u[0]<i.x))u[0]===e&&u[1]===r||(Vu(u),e=u[0],r=u[1]),u=t.pop();else{if(!i)break;Iu(i.arc)}if(function(){for(var t,n,e,r,i=0,u=Qu.length;i<u;++i)if((t=Qu[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=Ru(t,Gu[n[e]]);for(o.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,u=Gu.length;u--;)Su(i=Gu[u],t,n,e,r)&&Lu(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Ku||Math.abs(i[0][1]-i[1][1])>Ku)||delete Gu[u]}(o,a,s,c),function(t,n,e,r){var i,u,o,a,s,c,l,f,h,p,g,v,d=Qu.length,y=!0;for(i=0;i<d;++i)if(u=Qu[i]){for(o=u.site,a=(s=u.halfedges).length;a--;)Gu[s[a]]||s.splice(a,1);for(a=0,c=s.length;a<c;)g=(p=Pu(u,Gu[s[a]]))[0],v=p[1],f=(l=Eu(u,Gu[s[++a%c]]))[0],h=l[1],(Math.abs(g-f)>Ku||Math.abs(v-h)>Ku)&&(s.splice(a,0,Gu.push(ku(o,p,Math.abs(g-t)<Ku&&r-v>Ku?[t,Math.abs(f-t)<Ku?h:r]:Math.abs(v-r)<Ku&&e-g>Ku?[Math.abs(h-r)<Ku?f:e,r]:Math.abs(g-e)<Ku&&v-n>Ku?[e,Math.abs(f-e)<Ku?h:n]:Math.abs(v-n)<Ku&&g-t>Ku?[Math.abs(h-n)<Ku?f:t,n]:null))-1),++c);c&&(y=!1)}if(y){var _,m,w,x=1/0;for(i=0,y=null;i<d;++i)(u=Qu[i])&&(w=(_=(o=u.site)[0]-t)*_+(m=o[1]-n)*m)<x&&(x=w,y=u);if(y){var b=[t,n],M=[t,r],C=[e,r],T=[e,n];y.halfedges.push(Gu.push(ku(o=y.site,b,M))-1,Gu.push(ku(o,M,C))-1,Gu.push(ku(o,C,T))-1,Gu.push(ku(o,T,b))-1)}}for(i=0;i<d;++i)(u=Qu[i])&&(u.halfedges.length||delete Qu[i])}(o,a,s,c)}this.edges=Gu,this.cells=Qu,Wu=Ju=Gu=Qu=null}eo.prototype={constructor:eo,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Eu(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(u=(i=e.halfedges).length)for(var i,u,o,a,s,c,l=e.site,f=-1,h=n[i[u-1]],p=h.left===l?h.right:h.left;++f<u;)o=p,p=(h=n[i[f]]).left===l?h.right:h.left,o&&p&&r<o.index&&r<p.index&&(s=o,c=p,((a=l)[0]-c[0])*(s[1]-a[1])-(a[0]-s[0])*(c[1]-a[1])<0)&&t.push([l.data,o.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,u=this,o=u._found||0,a=u.cells.length;!(i=u.cells[o]);)if(++o>=a)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=u.cells[r=o],o=null,i.halfedges.forEach((function(e){var r=u.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],c=n-a[1],f=s*s+c*c;f<l&&(l=f,o=a.index)}}))}while(null!==o);return u._found=r,null==e||l<=e*e?i.site:null}};Math.SQRT2;function ro(t,n,e){this.k=t,this.x=n,this.y=e}ro.prototype={constructor:ro,scale:function(t){return 1===t?this:new ro(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new ro(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new ro(1,0,0);ro.prototype;e.d(n,"loadData",(function(){return io}));async function io(t){console.log(t)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,