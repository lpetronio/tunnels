var ancestrySuiteVisualization=function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=109)}({109:function(t,n,e){const r=e(110);t.exports=r},110:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,u=(o.left,a);var s=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},c=Array.prototype,l=(c.slice,c.map,Math.sqrt(50)),f=Math.sqrt(10),h=Math.sqrt(2),d=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=p(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function p(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=l?10:o>=f?5:o>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=l?10:o>=f?5:o>=h?2:1)}function g(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=l?i*=10:o>=f?i*=5:o>=h&&(i*=2),n<t?-i:i}var y=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r};Array.prototype.slice;var v={value:function(){}};function m(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new _(r)}function _(t){this._=t}function w(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function x(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function M(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=v,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}_.prototype=m.prototype={constructor:_,on:function(t,n){var e,r=this._,i=w(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=M(r[e],t.name,n);else if(null==n)for(e in r)r[e]=M(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=x(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new _(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var b=m;function C(){}var A=function(t){return null==t?C:function(){return this.querySelector(t)}};function k(){return[]}var T=function(t){return null==t?k:function(){return this.querySelectorAll(t)}},N=function(t){return function(){return this.matches(t)}},U=function(t){return new Array(t.length)};function R(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}R.prototype={constructor:R,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function D(t,n,e,r,i,o){for(var a,u=0,s=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new R(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function S(t,n,e,r,i,o,a){var u,s,c,l={},f=n.length,h=o.length,d=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(d[u]=c="$"+a.call(s,s.__data__,u,n),c in l?i[u]=s:l[c]=s);for(u=0;u<h;++u)(s=l[c="$"+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],l[c]=null):e[u]=new R(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&l[d[u]]===s&&(i[u]=s)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var E="http://www.w3.org/1999/xhtml",P={svg:"http://www.w3.org/2000/svg",xhtml:E,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},F=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),P.hasOwnProperty(n)?{space:P[n],local:t}:t};function I(t){return function(){this.removeAttribute(t)}}function q(t){return function(){this.removeAttributeNS(t.space,t.local)}}function H(t,n){return function(){this.setAttribute(t,n)}}function Y(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function j(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function $(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var O=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function V(t){return function(){this.style.removeProperty(t)}}function X(t,n,e){return function(){this.style.setProperty(t,n,e)}}function z(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function W(t,n){return t.style.getPropertyValue(n)||O(t).getComputedStyle(t,null).getPropertyValue(n)}function B(t){return function(){delete this[t]}}function Z(t,n){return function(){this[t]=n}}function J(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Q(t){return t.trim().split(/^|\s+/)}function G(t){return t.classList||new K(t)}function K(t){this._node=t,this._names=Q(t.getAttribute("class")||"")}function tt(t,n){for(var e=G(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function nt(t,n){for(var e=G(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function et(t){return function(){tt(this,t)}}function rt(t){return function(){nt(this,t)}}function it(t,n){return function(){(n.apply(this,arguments)?tt:nt)(this,t)}}K.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ot(){this.textContent=""}function at(t){return function(){this.textContent=t}}function ut(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function st(){this.innerHTML=""}function ct(t){return function(){this.innerHTML=t}}function lt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function dt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===E&&n.documentElement.namespaceURI===E?n.createElement(t):n.createElementNS(e,t)}}function pt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var gt=function(t){var n=F(t);return(n.local?pt:dt)(n)};function yt(){return null}function vt(){var t=this.parentNode;t&&t.removeChild(this)}function mt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function _t(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var wt={},xt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(wt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Mt(t,n,e){return t=bt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function bt(t,n,e){return function(r){var i=xt;xt=r;try{t.call(this,this.__data__,n,e)}finally{xt=i}}}function Ct(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function At(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function kt(t,n,e){var r=wt.hasOwnProperty(t.type)?Mt:bt;return function(i,o,a){var u,s=this.__on,c=r(n,o,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function Tt(t,n,e){var r=O(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Nt(t,n){return function(){return Tt(this,t,n)}}function Ut(t,n){return function(){return Tt(this,t,n.apply(this,arguments))}}var Rt=[null];function Dt(t,n){this._groups=t,this._parents=n}function St(){return new Dt([[document.documentElement]],Rt)}Dt.prototype=St.prototype={constructor:Dt,select:function(t){"function"!=typeof t&&(t=A(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),c[l]=a);return new Dt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new Dt(r,i)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new Dt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var e,r=n?S:D,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),c=new Array(a),l=0;l<a;++l){var f=i[l],h=o[l],d=h.length,p=t.call(f,f&&f.__data__,l,i),g=p.length,y=s[l]=new Array(g),v=u[l]=new Array(g);r(f,h,y,v,c[l]=new Array(d),p,n);for(var m,_,w=0,x=0;w<g;++w)if(m=y[w]){for(w>=x&&(x=w+1);!(_=v[x])&&++x<g;);m._next=_||null}}return(u=new Dt(u,i))._enter=s,u._exit=c,u},enter:function(){return new Dt(this._enter||this._groups.map(U),this._parents)},exit:function(){return new Dt(this._exit||this._groups.map(U),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;u<r;++u)a[u]=n[u];return new Dt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,c=i[o]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new Dt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=F(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?q:I:"function"==typeof n?e.local?$:j:e.local?Y:H)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?V:"function"==typeof n?z:X)(t,n,null==e?"":e)):W(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?B:"function"==typeof n?J:Z)(t,n)):this.node()[t]},classed:function(t,n){var e=Q(t+"");if(arguments.length<2){for(var r=G(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?it:n?et:rt)(e,n))},text:function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?ut:at)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?lt:ct)(t)):this.node().innerHTML},raise:function(){return this.each(ft)},lower:function(){return this.each(ht)},append:function(t){var n="function"==typeof t?t:gt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:gt(t),r=null==n?yt:"function"==typeof n?n:A(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(vt)},clone:function(t){return this.select(t?_t:mt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Ct(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?kt:At,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Ut:Nt)(t,n))}};var Lt=St,Et=function(t){return"string"==typeof t?new Dt([[document.querySelector(t)]],[document.documentElement]):new Dt([[t]],Rt)};var Pt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Ft(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function It(){}var qt="\\s*([+-]?\\d+)\\s*",Ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Yt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3,8})$/,$t=new RegExp("^rgb\\("+[qt,qt,qt]+"\\)$"),Ot=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),Vt=new RegExp("^rgba\\("+[qt,qt,qt,Ht]+"\\)$"),Xt=new RegExp("^rgba\\("+[Yt,Yt,Yt,Ht]+"\\)$"),zt=new RegExp("^hsl\\("+[Ht,Yt,Yt]+"\\)$"),Wt=new RegExp("^hsla\\("+[Ht,Yt,Yt,Ht]+"\\)$"),Bt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Zt(){return this.rgb().formatHex()}function Jt(){return this.rgb().formatRgb()}function Qt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=jt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Gt(n):3===e?new en(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new en(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new en(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=$t.exec(t))?new en(n[1],n[2],n[3],1):(n=Ot.exec(t))?new en(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Vt.exec(t))?Kt(n[1],n[2],n[3],n[4]):(n=Xt.exec(t))?Kt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=zt.exec(t))?un(n[1],n[2]/100,n[3]/100,1):(n=Wt.exec(t))?un(n[1],n[2]/100,n[3]/100,n[4]):Bt.hasOwnProperty(t)?Gt(Bt[t]):"transparent"===t?new en(NaN,NaN,NaN,0):null}function Gt(t){return new en(t>>16&255,t>>8&255,255&t,1)}function Kt(t,n,e,r){return r<=0&&(t=n=e=NaN),new en(t,n,e,r)}function tn(t){return t instanceof It||(t=Qt(t)),t?new en((t=t.rgb()).r,t.g,t.b,t.opacity):new en}function nn(t,n,e,r){return 1===arguments.length?tn(t):new en(t,n,e,null==r?1:r)}function en(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function rn(){return"#"+an(this.r)+an(this.g)+an(this.b)}function on(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function an(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function un(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new cn(t,n,e,r)}function sn(t){if(t instanceof cn)return new cn(t.h,t.s,t.l,t.opacity);if(t instanceof It||(t=Qt(t)),!t)return new cn;if(t instanceof cn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new cn(a,u,s,t.opacity)}function cn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ln(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function fn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Pt(It,Qt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Zt,formatHex:Zt,formatHsl:function(){return sn(this).formatHsl()},formatRgb:Jt,toString:Jt}),Pt(en,nn,Ft(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new en(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new en(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:rn,formatHex:rn,formatRgb:on,toString:on})),Pt(cn,(function(t,n,e,r){return 1===arguments.length?sn(t):new cn(t,n,e,null==r?1:r)}),Ft(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new cn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new cn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new en(ln(t>=240?t-240:t+120,i,r),ln(t,i,r),ln(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var hn=function(t){return function(){return t}};function dn(t,n){return function(e){return t+e*n}}function pn(t){return 1==(t=+t)?gn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):hn(isNaN(n)?e:n)}}function gn(t,n){var e=n-t;return e?dn(t,e):hn(isNaN(t)?n:t)}var yn=function t(n){var e=pn(n);function r(t,n){var r=e((t=nn(t)).r,(n=nn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=gn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function vn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=nn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var mn=vn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return fn((e-r/n)*n,a,i,o,u)}})),_n=(vn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return fn((e-r/n)*n,i,o,a,u)}})),function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}});function wn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function xn(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Rn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}var Mn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},bn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Cn=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Rn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},An=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,kn=new RegExp(An.source,"g");var Tn,Nn,Un=function(t,n){var e,r,i,o=An.lastIndex=kn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=An.exec(t))&&(r=kn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:bn(e,r)})),o=kn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},Rn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?hn(n):("number"===r?bn:"string"===r?(e=Qt(n))?(n=e,yn):Un:n instanceof Qt?yn:n instanceof Date?Mn:wn(n)?_n:Array.isArray(n)?xn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Cn:bn)(t,n)},Dn=0,Sn=0,Ln=0,En=0,Pn=0,Fn=0,In="object"==typeof performance&&performance.now?performance:Date,qn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Hn(){return Pn||(qn(Yn),Pn=In.now()+Fn)}function Yn(){Pn=0}function jn(){this._call=this._time=this._next=null}function $n(t,n,e){var r=new jn;return r.restart(t,n,e),r}function On(){Pn=(En=In.now())+Fn,Dn=Sn=0;try{!function(){Hn(),++Dn;for(var t,n=Tn;n;)(t=Pn-n._time)>=0&&n._call.call(null,t),n=n._next;--Dn}()}finally{Dn=0,function(){var t,n,e=Tn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Tn=n);Nn=t,Xn(r)}(),Pn=0}}function Vn(){var t=In.now(),n=t-En;n>1e3&&(Fn-=n,En=t)}function Xn(t){Dn||(Sn&&(Sn=clearTimeout(Sn)),t-Pn>24?(t<1/0&&(Sn=setTimeout(On,t-In.now()-Fn)),Ln&&(Ln=clearInterval(Ln))):(Ln||(En=In.now(),Ln=setInterval(Vn,1e3)),Dn=1,qn(On)))}jn.prototype=$n.prototype={constructor:jn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Hn():+e)+(null==n?0:+n),this._next||Nn===this||(Nn?Nn._next=this:Tn=this,Nn=this),this._call=t,this._time=e,Xn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Xn())}};var zn=function(t,n,e){var r=new jn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Wn=b("start","end","cancel","interrupt"),Bn=[],Zn=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var c,l,f,h;if(1!==e.state)return u();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return zn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(zn((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=$n((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Wn,tween:Bn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Jn(t,n){var e=Gn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Qn(t,n){var e=Gn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Gn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Kn,te,ne,ee,re=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},ie=180/Math.PI,oe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ae=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ie,skewX:Math.atan(s)*ie,scaleX:a,scaleY:u}};function ue(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:bn(t,i)},{i:s-2,x:bn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:bn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:bn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:bn(t,e)},{i:u-2,x:bn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var se=ue((function(t){return"none"===t?oe:(Kn||(Kn=document.createElement("DIV"),te=document.documentElement,ne=document.defaultView),Kn.style.transform=t,t=ne.getComputedStyle(te.appendChild(Kn),null).getPropertyValue("transform"),te.removeChild(Kn),t=t.slice(7,-1).split(","),ae(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ce=ue((function(t){return null==t?oe:(ee||(ee=document.createElementNS("http://www.w3.org/2000/svg","g")),ee.setAttribute("transform",t),(t=ee.transform.baseVal.consolidate())?(t=t.matrix,ae(t.a,t.b,t.c,t.d,t.e,t.f)):oe)}),", ",")",")");function le(t,n){var e,r;return function(){var i=Qn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function fe(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Qn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}o.tween=i}}function he(t,n,e){var r=t._id;return t.each((function(){var t=Qn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Gn(t,r).value[n]}}var de=function(t,n){var e;return("number"==typeof n?bn:n instanceof Qt?yn:(e=Qt(n))?(n=e,yn):Un)(t,n)};function pe(t){return function(){this.removeAttribute(t)}}function ge(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ye(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function ve(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function me(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function _e(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function we(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function xe(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Me(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&xe(t,i)),e}return i._value=n,i}function be(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&we(t,i)),e}return i._value=n,i}function Ce(t,n){return function(){Jn(this,t).delay=+n.apply(this,arguments)}}function Ae(t,n){return n=+n,function(){Jn(this,t).delay=n}}function ke(t,n){return function(){Qn(this,t).duration=+n.apply(this,arguments)}}function Te(t,n){return n=+n,function(){Qn(this,t).duration=n}}function Ne(t,n){if("function"!=typeof n)throw new Error;return function(){Qn(this,t).ease=n}}function Ue(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Jn:Qn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Re=Lt.prototype.constructor;function De(t){return function(){this.style.removeProperty(t)}}function Se(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Le(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Se(t,o,e)),r}return o._value=n,o}function Ee(t){return function(n){this.textContent=t.call(this,n)}}function Pe(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ee(r)),n}return r._value=t,r}var Fe=0;function Ie(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function qe(){return++Fe}var He=Lt.prototype;Ie.prototype=function(t){return Lt().transition(t)}.prototype={constructor:Ie,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=A(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],l=c.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=c[h])&&(s=t.call(u,u.__data__,h,c))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,Zn(f[h],n,e,h,f,Gn(u,e)));return new Ie(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=T(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,d=t.call(s,s.__data__,f,c),p=Gn(s,e),g=0,y=d.length;g<y;++g)(h=d[g])&&Zn(h,n,e,g,d,p);o.push(d),a.push(s)}return new Ie(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new Ie(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;u<r;++u)a[u]=n[u];return new Ie(a,this._parents,this._name,this._id)},selection:function(){return new Re(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=qe(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=Gn(a,n);Zn(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ie(r,this._parents,t,e)},call:He.call,nodes:He.nodes,node:He.node,size:He.size,empty:He.empty,each:He.each,on:function(t,n){var e=this._id;return arguments.length<2?Gn(this.node(),e).on.on(t):this.each(Ue(e,t,n))},attr:function(t,n){var e=F(t),r="transform"===e?ce:de;return this.attrTween(t,"function"==typeof n?(e.local?_e:me)(e,r,he(this,"attr."+t,n)):null==n?(e.local?ge:pe)(e):(e.local?ve:ye)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=F(t);return this.tween(e,(r.local?Me:be)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?se:de;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=W(this,t),a=(this.style.removeProperty(t),W(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,De(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=W(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=W(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,he(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=Qn(this,t),c=s.on,l=null==s.value[a]?o||(o=De(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(u,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=W(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Le(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(he(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Pe(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Gn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?le:fe)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ce:Ae)(n,t)):Gn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ke:Te)(n,t)):Gn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ne(n,t)):Gn(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=Qn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n}))}))}};var Ye={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function je(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Ye.time=Hn(),Ye;return e}Lt.prototype.interrupt=function(t){return this.each((function(){re(this,t)}))},Lt.prototype.transition=function(t){var n,e;t instanceof Ie?(n=t._id,t=t._name):(n=qe(),(e=Ye).time=Hn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&Zn(a,t,n,c,u,e||je(a,n));return new Ie(r,this._parents,t,n)};function $e(t){return[+t[0],+t[1]]}function Oe(t){return[$e(t[0]),$e(t[1])]}["w","e"].map(Ve),["n","s"].map(Ve),["n","w","e","s","nw","ne","sw","se"].map(Ve);function Ve(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Xe=Math.PI,ze=2*Xe,We=ze-1e-6;function Be(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ze(){return new Be}Be.prototype=Ze.prototype={constructor:Be,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,c=o-t,l=a-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*u-s*c)>1e-6&&i){var h=e-o,d=r-a,p=u*u+s*s,g=h*h+d*d,y=Math.sqrt(p),v=Math.sqrt(f),m=i*Math.tan((Xe-Math.acos((p+f-g)/(2*y*v)))/2),_=m/v,w=m/y;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*c)+","+(n+_*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*d)+","+(this._x1=t+w*u)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+a,c=n+u,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%ze+ze),f>We?this._+="A"+e+","+e+",0,1,"+l+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Xe)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Je=Ze;function Qe(){}function Ge(t,n){var e=new Qe;if(t instanceof Qe)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}Qe.prototype=Ge.prototype={constructor:Qe,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ke=Ge,tr=function(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var s,c,l,f=-1,h=e.length,d=r[i++],p=Ke(),g=a();++f<h;)(l=p.get(s=d(c=e[f])+""))?l.push(c):p.set(s,[c]);return p.each((function(t,n){u(g,n,o(t,i,a,u))})),g}return e={object:function(t){return o(t,0,nr,er)},map:function(t){return o(t,0,rr,ir)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,u=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=u?a.sort((function(t,n){return u(t.key,n.key)})):a}(o(t,0,rr,ir),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function nr(){return{}}function er(t,n,e){t[n]=e}function rr(){return Ke()}function ir(t,n,e){t.set(n,e)}function or(){}var ar=Ke.prototype;function ur(t,n){var e=new or;if(t instanceof or)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}or.prototype=ur.prototype={constructor:or,has:ar.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ar.remove,clear:ar.clear,values:ar.keys,size:ar.size,empty:ar.empty,each:ar.each};Array.prototype.slice;var sr={},cr={};function lr(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function fr(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function hr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function dr(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+hr(-n,6):n>9999?"+"+hr(n,6):hr(n,4))+"-"+hr(t.getUTCMonth()+1,2)+"-"+hr(t.getUTCDate(),2)+(o?"T"+hr(e,2)+":"+hr(r,2)+":"+hr(i,2)+"."+hr(o,3)+"Z":i?"T"+hr(e,2)+":"+hr(r,2)+":"+hr(i,2)+"Z":r||e?"T"+hr(e,2)+":"+hr(r,2)+"Z":"")}var pr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,s=o<=0,c=!1;function l(){if(s)return cr;if(c)return c=!1,sr;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?s=!0:10===(r=t.charCodeAt(a++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=l())!==cr;){for(var f=[];r!==sr&&r!==cr;)f.push(r),r=l();n&&null==(f=n(f,u++))||i.push(f)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?dr(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=lr(t);return function(r,i){return n(e(r),i,t)}}(t,n):lr(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=fr(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=fr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},gr=pr(","),yr=gr.parse,vr=(gr.parseRows,gr.format,gr.formatBody,gr.formatRows,gr.formatRow,gr.formatValue,pr("\t")),mr=vr.parse;vr.parseRows,vr.format,vr.formatBody,vr.formatRows,vr.formatRow,vr.formatValue;function _r(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var wr=function(t,n){return fetch(t,n).then(_r)};function xr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),wr(n,e).then((function(n){return t(n,r)}))}}xr(yr),xr(mr);function Mr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var br=function(t,n){return fetch(t,n).then(Mr)};function Cr(t){return function(n,e){return wr(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Cr("application/xml"),Cr("text/html"),Cr("image/svg+xml");function Ar(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,s,c,l,f,h,d=t._root,p={data:r},g=t._x0,y=t._y0,v=t._x1,m=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(o=(g+v)/2))?g=o:v=o,(l=e>=(a=(y+m)/2))?y=a:m=a,i=d,!(d=d[f=l<<1|c]))return i[f]=p,t;if(u=+t._x.call(null,d.data),s=+t._y.call(null,d.data),n===u&&e===s)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(o=(g+v)/2))?g=o:v=o,(l=e>=(a=(y+m)/2))?y=a:m=a}while((f=l<<1|c)==(h=(s>=a)<<1|u>=o));return i[h]=d,i[f]=p,t}var kr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Tr(t){return t[0]}function Nr(t){return t[1]}function Ur(t,n,e){var r=new Rr(null==n?Tr:n,null==e?Nr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Rr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Dr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Sr=Ur.prototype=Rr.prototype;Sr.copy=function(){var t,n,e=new Rr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Dr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Dr(n));return e},Sr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ar(this.cover(n,e),n,e,t)},Sr.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),e=0;e<o;++e)Ar(this,a[e],u[e],t[e]);return this},Sr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,s=i-e,c=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=c,c=a,s*=2,u){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Sr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Sr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Sr.find=function(t,n,e){var r,i,o,a,u,s,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new kr(g,l,f,h,d)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,d=n+e,e*=e);s=p.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(o=s.y0)>d||(a=s.x1)<l||(u=s.y1)<f))if(g.length){var y=(i+a)/2,v=(o+u)/2;p.push(new kr(g[3],y,v,a,u),new kr(g[2],i,v,y,u),new kr(g[1],y,o,a,v),new kr(g[0],i,o,y,v)),(c=(n>=v)<<1|t>=y)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=s)}else{var m=t-+this._x.call(null,g.data),_=n-+this._y.call(null,g.data),w=m*m+_*_;if(w<e){var x=Math.sqrt(e=w);l=t-x,f=n-x,h=t+x,d=n+x,r=g.data}}return r},Sr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,s,c,l,f,h,d=this._root,p=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((c=o>=(u=(p+y)/2))?p=u:y=u,(l=a>=(s=(g+v)/2))?g=s:v=s,n=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Sr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Sr.root=function(){return this._root},Sr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Sr.visit=function(t){var n,e,r,i,o,a,u=[],s=this._root;for(s&&u.push(new kr(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&s.length){var c=(r+o)/2,l=(i+a)/2;(e=s[3])&&u.push(new kr(e,c,l,o,a)),(e=s[2])&&u.push(new kr(e,r,l,c,a)),(e=s[1])&&u.push(new kr(e,c,i,o,l)),(e=s[0])&&u.push(new kr(e,r,i,c,l))}return this},Sr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new kr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,s=n.x1,c=n.y1,l=(a+s)/2,f=(u+c)/2;(o=i[0])&&e.push(new kr(o,a,u,l,f)),(o=i[1])&&e.push(new kr(o,l,u,s,f)),(o=i[2])&&e.push(new kr(o,a,f,l,c)),(o=i[3])&&e.push(new kr(o,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Sr.x=function(t){return arguments.length?(this._x=t,this):this._x},Sr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Lr=function(){return Math.random()},Er=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Lr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Lr)),Pr=(function t(n){function e(){var t=Er.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Lr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Lr));(function t(n){function e(t){var e=Pr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Lr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Lr);function Fr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Ir(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var qr=Array.prototype,Hr=qr.map,Yr=qr.slice,jr={name:"implicit"};function $r(){var t=Ke(),n=[],e=[],r=jr;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==jr)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Ke();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Yr.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return $r(n,e).unknown(r)},Fr.apply(i,arguments),i}var Or=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Vr=function(t){return+t},Xr=[0,1];function zr(t){return t}function Wr(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Br(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Zr(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Wr(i,r),o=e(a,o)):(r=Wr(r,i),o=e(o,a)),function(t){return o(r(t))}}function Jr(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Wr(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=u(t,n,1,r)-1;return o[e](i[e](n))}}function Qr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Gr(){var t,n,e,r,i,o,a=Xr,u=Xr,s=Rn,c=zr;function l(){return r=Math.min(a.length,u.length)>2?Jr:Zr,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,s)))(t(c(n)))}return f.invert=function(e){return c(n((o||(o=r(u,a.map(t),bn)))(e)))},f.domain=function(t){return arguments.length?(a=Hr.call(t,Vr),c===zr||(c=Br(a)),l()):a.slice()},f.range=function(t){return arguments.length?(u=Yr.call(t),l()):u.slice()},f.rangeRound=function(t){return u=Yr.call(t),s=Or,l()},f.clamp=function(t){return arguments.length?(c=t?Br(a):zr,f):c!==zr},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function Kr(t,n){return Gr()(t,n)}var ti=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ni(t){if(!(n=ti.exec(t)))throw new Error("invalid format: "+t);var n;return new ei({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ei(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ni.prototype=ei.prototype,ei.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ri,ii,oi,ai,ui=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},si=function(t){return(t=ui(Math.abs(t)))?t[1]:NaN},ci=function(t,n){var e=ui(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},li={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ci(100*t,n)},r:ci,s:function(t,n){var e=ui(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ri=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ui(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},fi=function(t){return t},hi=Array.prototype.map,di=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ii=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?fi:(n=hi.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?fi:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(hi.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ni(t)).fill,e=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,y=t.precision,v=t.trim,m=t.type;"n"===m?(g=!0,m="g"):li[m]||(void 0===y&&(y=12),v=!0,m="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?o:/[%p]/.test(m)?s:"",x=li[m],M=/[defgprs%]/.test(m);function b(t){var i,o,s,h=_,b=w;if("c"===m)b=x(t)+b,t="";else{var C=(t=+t)<0;if(t=isNaN(t)?l:x(Math.abs(t),y),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),C&&0==+t&&(C=!1),h=(C?"("===f?f:c:"-"===f||"("===f?"":f)+h,b=("s"===m?di[8+ri/3]:"")+b+(C&&"("===f?")":""),M)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?a+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var A=h.length+t.length+b.length,k=A<p?new Array(p-A+1).join(n):"";switch(g&&d&&(t=r(k+t,k.length?p-b.length:1/0),k=""),e){case"<":t=h+t+b+k;break;case"=":t=h+k+t+b;break;case"^":t=k.slice(0,A=k.length>>1)+h+t+b+k.slice(A);break;default:t=k+h+t+b}return u(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=ni(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(si(n)/3))),i=Math.pow(10,-r),o=di[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),oi=ii.format,ai=ii.formatPrefix;var pi=function(t,n,e,r){var i,o=g(t,n,e);switch((r=ni(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(si(n)/3)))-si(Math.abs(t)))}(o,a))||(r.precision=i),ai(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,si(n)-si(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-si(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return oi(r)};function gi(t){var n=t.domain;return t.ticks=function(t){var e=n();return d(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return pi(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=p(u,s,e))>0?r=p(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=p(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}function yi(){var t=Kr(zr,zr);return t.copy=function(){return Qr(t,yi())},Fr.apply(t,arguments),gi(t)}var vi=new Date,mi=new Date;function _i(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return _i((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return vi.setTime(+n),mi.setTime(+r),t(vi),t(mi),Math.floor(e(vi,mi))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var wi=_i((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));wi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?_i((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var xi=wi,Mi=(wi.range,_i((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));Mi.range;function bi(t){return _i((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Ci=bi(0),Ai=bi(1),ki=bi(2),Ti=bi(3),Ni=bi(4),Ui=bi(5),Ri=bi(6),Di=(Ci.range,Ai.range,ki.range,Ti.range,Ni.range,Ui.range,Ri.range,_i((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Si=Di,Li=(Di.range,_i((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Ei=(Li.range,_i((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Pi=(Ei.range,_i((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Fi=(Pi.range,_i((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Fi.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?_i((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Fi:null};Fi.range;function Ii(t){return _i((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var qi=Ii(0),Hi=Ii(1),Yi=Ii(2),ji=Ii(3),$i=Ii(4),Oi=Ii(5),Vi=Ii(6),Xi=(qi.range,Hi.range,Yi.range,ji.range,$i.range,Oi.range,Vi.range,_i((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),zi=Xi,Wi=(Xi.range,_i((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Wi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?_i((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Bi=Wi;Wi.range;function Zi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ji(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Qi(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var Gi,Ki={"-":"",_:" ",0:"0"},to=/^\s*\d+/,no=/^%/,eo=/[\\^$*+?|[\]().{}]/g;function ro(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function io(t){return t.replace(eo,"\\$&")}function oo(t){return new RegExp("^(?:"+t.map(io).join("|")+")","i")}function ao(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function uo(t,n,e){var r=to.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function so(t,n,e){var r=to.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function co(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function lo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function fo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function ho(t,n,e){var r=to.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function po(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function go(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function yo(t,n,e){var r=to.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function vo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function mo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function _o(t,n,e){var r=to.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function wo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function xo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Mo(t,n,e){var r=to.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function bo(t,n,e){var r=to.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Co(t,n,e){var r=to.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Ao(t,n,e){var r=no.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ko(t,n,e){var r=to.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function To(t,n,e){var r=to.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function No(t,n){return ro(t.getDate(),n,2)}function Uo(t,n){return ro(t.getHours(),n,2)}function Ro(t,n){return ro(t.getHours()%12||12,n,2)}function Do(t,n){return ro(1+Si.count(xi(t),t),n,3)}function So(t,n){return ro(t.getMilliseconds(),n,3)}function Lo(t,n){return So(t,n)+"000"}function Eo(t,n){return ro(t.getMonth()+1,n,2)}function Po(t,n){return ro(t.getMinutes(),n,2)}function Fo(t,n){return ro(t.getSeconds(),n,2)}function Io(t){var n=t.getDay();return 0===n?7:n}function qo(t,n){return ro(Ci.count(xi(t)-1,t),n,2)}function Ho(t,n){var e=t.getDay();return t=e>=4||0===e?Ni(t):Ni.ceil(t),ro(Ni.count(xi(t),t)+(4===xi(t).getDay()),n,2)}function Yo(t){return t.getDay()}function jo(t,n){return ro(Ai.count(xi(t)-1,t),n,2)}function $o(t,n){return ro(t.getFullYear()%100,n,2)}function Oo(t,n){return ro(t.getFullYear()%1e4,n,4)}function Vo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+ro(n/60|0,"0",2)+ro(n%60,"0",2)}function Xo(t,n){return ro(t.getUTCDate(),n,2)}function zo(t,n){return ro(t.getUTCHours(),n,2)}function Wo(t,n){return ro(t.getUTCHours()%12||12,n,2)}function Bo(t,n){return ro(1+zi.count(Bi(t),t),n,3)}function Zo(t,n){return ro(t.getUTCMilliseconds(),n,3)}function Jo(t,n){return Zo(t,n)+"000"}function Qo(t,n){return ro(t.getUTCMonth()+1,n,2)}function Go(t,n){return ro(t.getUTCMinutes(),n,2)}function Ko(t,n){return ro(t.getUTCSeconds(),n,2)}function ta(t){var n=t.getUTCDay();return 0===n?7:n}function na(t,n){return ro(qi.count(Bi(t)-1,t),n,2)}function ea(t,n){var e=t.getUTCDay();return t=e>=4||0===e?$i(t):$i.ceil(t),ro($i.count(Bi(t),t)+(4===Bi(t).getUTCDay()),n,2)}function ra(t){return t.getUTCDay()}function ia(t,n){return ro(Hi.count(Bi(t)-1,t),n,2)}function oa(t,n){return ro(t.getUTCFullYear()%100,n,2)}function aa(t,n){return ro(t.getUTCFullYear()%1e4,n,4)}function ua(){return"+0000"}function sa(){return"%"}function ca(t){return+t}function la(t){return Math.floor(+t/1e3)}!function(t){Gi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,c=oo(i),l=ao(i),f=oo(o),h=ao(o),d=oo(a),p=ao(a),g=oo(u),y=ao(u),v=oo(s),m=ao(s),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:No,e:No,f:Lo,H:Uo,I:Ro,j:Do,L:So,m:Eo,M:Po,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ca,s:la,S:Fo,u:Io,U:qo,V:Ho,w:Yo,W:jo,x:null,X:null,y:$o,Y:Oo,Z:Vo,"%":sa},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Xo,e:Xo,f:Jo,H:zo,I:Wo,j:Bo,L:Zo,m:Qo,M:Go,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ca,s:la,S:Ko,u:ta,U:na,V:ea,w:ra,W:ia,x:null,X:null,y:oa,Y:aa,Z:ua,"%":sa},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return C(t,n,e,r)},d:mo,e:mo,f:Co,H:wo,I:wo,j:_o,L:bo,m:vo,M:xo,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},q:yo,Q:ko,s:To,S:Mo,u:so,U:co,V:lo,w:uo,W:fo,x:function(t,n,r){return C(t,e,n,r)},X:function(t,n,e){return C(t,r,n,e)},y:po,Y:ho,Z:go,"%":Ao};function M(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Ki[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function b(t,n){return function(e){var r,i,o=Qi(1900,void 0,1);if(C(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ji(Qi(o.y,0,1))).getUTCDay(),r=i>4||0===i?Hi.ceil(r):Hi(r),r=zi.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Zi(Qi(o.y,0,1))).getDay(),r=i>4||0===i?Ai.ceil(r):Ai(r),r=Si.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ji(Qi(o.y,0,1)).getUTCDay():Zi(Qi(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ji(o)):Zi(o)}}function C(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Ki?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=M(e,_),_.X=M(r,_),_.c=M(n,_),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),Gi.format,Gi.parse,Gi.utcFormat,Gi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var fa=_i((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),ha=(fa.range,_i((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),da=(ha.range,_i((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));da.range;function pa(){var t,n,e,r,i,o=0,a=1,u=zr,s=!1;function c(n){return isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,s?Math.max(0,Math.min(1,n)):n))}return c.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(a=+i[1]),e=t===n?0:1/(n-t),c):[o,a]},c.clamp=function(t){return arguments.length?(s=!!t,c):s},c.interpolator=function(t){return arguments.length?(u=t,c):u},c.unknown=function(t){return arguments.length?(i=t,c):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),c}}function ga(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function ya(){var t=gi(pa()(zr));return t.copy=function(){return ga(t,ya())},Ir.apply(t,arguments)}var va,ma=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map((function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e})),_a=mn((va=ma)[va.length-1]),wa=function(t){return function(){return t}},xa=Math.abs,Ma=Math.atan2,ba=Math.cos,Ca=Math.max,Aa=Math.min,ka=Math.sin,Ta=Math.sqrt,Na=Math.PI,Ua=Na/2,Ra=2*Na;function Da(t){return t>1?0:t<-1?Na:Math.acos(t)}function Sa(t){return t>=1?Ua:t<=-1?-Ua:Math.asin(t)}function La(t){return t.innerRadius}function Ea(t){return t.outerRadius}function Pa(t){return t.startAngle}function Fa(t){return t.endAngle}function Ia(t){return t&&t.padAngle}function qa(t,n,e,r,i,o,a,u){var s=e-t,c=r-n,l=a-i,f=u-o,h=f*s-l*c;if(!(h*h<1e-12))return[t+(h=(l*(n-o)-f*(t-i))/h)*s,n+h*c]}function Ha(t,n,e,r,i,o,a){var u=t-e,s=n-r,c=(a?o:-o)/Ta(u*u+s*s),l=c*s,f=-c*u,h=t+l,d=n+f,p=e+l,g=r+f,y=(h+p)/2,v=(d+g)/2,m=p-h,_=g-d,w=m*m+_*_,x=i-o,M=h*g-p*d,b=(_<0?-1:1)*Ta(Ca(0,x*x*w-M*M)),C=(M*_-m*b)/w,A=(-M*m-_*b)/w,k=(M*_+m*b)/w,T=(-M*m+_*b)/w,N=C-y,U=A-v,R=k-y,D=T-v;return N*N+U*U>R*R+D*D&&(C=k,A=T),{cx:C,cy:A,x01:-l,y01:-f,x11:C*(i/x-1),y11:A*(i/x-1)}}var Ya=function(){var t=La,n=Ea,e=wa(0),r=null,i=Pa,o=Fa,a=Ia,u=null;function s(){var s,c,l=+t.apply(this,arguments),f=+n.apply(this,arguments),h=i.apply(this,arguments)-Ua,d=o.apply(this,arguments)-Ua,p=xa(d-h),g=d>h;if(u||(u=s=Je()),f<l&&(c=f,f=l,l=c),f>1e-12)if(p>Ra-1e-12)u.moveTo(f*ba(h),f*ka(h)),u.arc(0,0,f,h,d,!g),l>1e-12&&(u.moveTo(l*ba(d),l*ka(d)),u.arc(0,0,l,d,h,g));else{var y,v,m=h,_=d,w=h,x=d,M=p,b=p,C=a.apply(this,arguments)/2,A=C>1e-12&&(r?+r.apply(this,arguments):Ta(l*l+f*f)),k=Aa(xa(f-l)/2,+e.apply(this,arguments)),T=k,N=k;if(A>1e-12){var U=Sa(A/l*ka(C)),R=Sa(A/f*ka(C));(M-=2*U)>1e-12?(w+=U*=g?1:-1,x-=U):(M=0,w=x=(h+d)/2),(b-=2*R)>1e-12?(m+=R*=g?1:-1,_-=R):(b=0,m=_=(h+d)/2)}var D=f*ba(m),S=f*ka(m),L=l*ba(x),E=l*ka(x);if(k>1e-12){var P,F=f*ba(_),I=f*ka(_),q=l*ba(w),H=l*ka(w);if(p<Na&&(P=qa(D,S,q,H,F,I,L,E))){var Y=D-P[0],j=S-P[1],$=F-P[0],O=I-P[1],V=1/ka(Da((Y*$+j*O)/(Ta(Y*Y+j*j)*Ta($*$+O*O)))/2),X=Ta(P[0]*P[0]+P[1]*P[1]);T=Aa(k,(l-X)/(V-1)),N=Aa(k,(f-X)/(V+1))}}b>1e-12?N>1e-12?(y=Ha(q,H,D,S,f,N,g),v=Ha(F,I,L,E,f,N,g),u.moveTo(y.cx+y.x01,y.cy+y.y01),N<k?u.arc(y.cx,y.cy,N,Ma(y.y01,y.x01),Ma(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,N,Ma(y.y01,y.x01),Ma(y.y11,y.x11),!g),u.arc(0,0,f,Ma(y.cy+y.y11,y.cx+y.x11),Ma(v.cy+v.y11,v.cx+v.x11),!g),u.arc(v.cx,v.cy,N,Ma(v.y11,v.x11),Ma(v.y01,v.x01),!g))):(u.moveTo(D,S),u.arc(0,0,f,m,_,!g)):u.moveTo(D,S),l>1e-12&&M>1e-12?T>1e-12?(y=Ha(L,E,F,I,l,-T,g),v=Ha(D,S,q,H,l,-T,g),u.lineTo(y.cx+y.x01,y.cy+y.y01),T<k?u.arc(y.cx,y.cy,T,Ma(y.y01,y.x01),Ma(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,T,Ma(y.y01,y.x01),Ma(y.y11,y.x11),!g),u.arc(0,0,l,Ma(y.cy+y.y11,y.cx+y.x11),Ma(v.cy+v.y11,v.cx+v.x11),g),u.arc(v.cx,v.cy,T,Ma(v.y11,v.x11),Ma(v.y01,v.x01),!g))):u.arc(0,0,l,x,w,g):u.lineTo(L,E)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Na/2;return[ba(r)*e,ka(r)*e]},s.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:wa(+n),s):t},s.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:wa(+t),s):n},s.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:wa(+t),s):e},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:wa(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:wa(+t),s):i},s.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:wa(+t),s):o},s.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:wa(+t),s):a},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s},ja=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},$a=function(t){return t},Oa=function(){var t=$a,n=ja,e=null,r=wa(0),i=wa(Ra),o=wa(0);function a(a){var u,s,c,l,f,h=a.length,d=0,p=new Array(h),g=new Array(h),y=+r.apply(this,arguments),v=Math.min(Ra,Math.max(-Ra,i.apply(this,arguments)-y)),m=Math.min(Math.abs(v)/h,o.apply(this,arguments)),_=m*(v<0?-1:1);for(u=0;u<h;++u)(f=g[p[u]=u]=+t(a[u],u,a))>0&&(d+=f);for(null!=n?p.sort((function(t,e){return n(g[t],g[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,c=d?(v-h*_)/d:0;u<h;++u,y=l)s=p[u],l=y+((f=g[s])>0?f*c:0)+_,g[s]={data:a[s],index:u,value:f,startAngle:y,endAngle:l,padAngle:m};return g}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:wa(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:wa(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:wa(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:wa(+t),a):o},a};function Va(){this._=null}function Xa(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function za(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Wa(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Ba(t){for(;t.L;)t=t.L;return t}Va.prototype={constructor:Va,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Ba(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(za(this,e),e=(t=e).U),e.C=!1,r.C=!0,Wa(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Wa(this,e),e=(t=e).U),e.C=!1,r.C=!0,za(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?Ba(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,za(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Wa(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,za(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Wa(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,za(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Wa(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Za=Va;function Ja(t,n,e,r){var i=[null,null],o=wu.push(i)-1;return i.left=t,i.right=n,e&&Ga(i,t,n,e),r&&Ga(i,n,t,r),mu[t.index].halfedges.push(o),mu[n.index].halfedges.push(o),i}function Qa(t,n,e){var r=[n,e];return r.left=t,r}function Ga(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Ka(t,n,e,r,i){var o,a=t[0],u=t[1],s=a[0],c=a[1],l=0,f=1,h=u[0]-s,d=u[1]-c;if(o=n-s,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=e-c,d||!(o>0)){if(o/=d,d<0){if(o<l)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>l&&(l=o)}if(o=i-c,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>l&&(l=o)}else if(d>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*d]),f<1&&(t[1]=[s+f*h,c+f*d]),!0)}}}}}function tu(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],d=l[0],p=l[1],g=(f+d)/2,y=(h+p)/2;if(p===h){if(g<n||g>=r)return;if(f>d){if(s){if(s[1]>=i)return}else s=[g,e];o=[g,i]}else{if(s){if(s[1]<e)return}else s=[g,i];o=[g,e]}}else if(u=y-(a=(f-d)/(p-h))*g,a<-1||a>1)if(f>d){if(s){if(s[1]>=i)return}else s=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(s){if(s[1]<e)return}else s=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<p){if(s){if(s[0]>=r)return}else s=[n,a*n+u];o=[r,a*r+u]}else{if(s){if(s[0]<n)return}else s=[r,a*r+u];o=[n,a*n+u]}return t[0]=s,t[1]=o,!0}function nu(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function eu(t,n){return n[+(n.left!==t.site)]}function ru(t,n){return n[+(n.left===t.site)]}var iu,ou=[];function au(){Xa(this),this.x=this.y=this.arc=this.site=this.cy=null}function uu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],s=r[0]-a,c=r[1]-u,l=o[0]-a,f=o[1]-u,h=2*(s*f-c*l);if(!(h>=-Mu)){var d=s*s+c*c,p=l*l+f*f,g=(f*d-c*p)/h,y=(s*p-l*d)/h,v=ou.pop()||new au;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=y+u)+Math.sqrt(g*g+y*y),t.circle=v;for(var m=null,_=_u._;_;)if(v.y<_.y||v.y===_.y&&v.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}_u.insert(m,v),m||(iu=v)}}}}function su(t){var n=t.circle;n&&(n.P||(iu=n.N),_u.remove(n),ou.push(n),Xa(n),t.circle=null)}var cu=[];function lu(){Xa(this),this.edge=this.site=this.circle=null}function fu(t){var n=cu.pop()||new lu;return n.site=t,n}function hu(t){su(t),vu.remove(t),cu.push(t),Xa(t)}function du(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];hu(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<xu&&Math.abs(r-s.circle.cy)<xu;)o=s.P,u.unshift(s),hu(s),s=o;u.unshift(s),su(s);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<xu&&Math.abs(r-c.circle.cy)<xu;)a=c.N,u.push(c),hu(c),c=a;u.push(c),su(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],Ga(c.edge,s.site,c.site,i);s=u[0],(c=u[f-1]).edge=Ja(s.site,c.site,null,i),uu(s),uu(c)}function pu(t){for(var n,e,r,i,o=t[0],a=t[1],u=vu._;u;)if((r=gu(u,a)-o)>xu)u=u.L;else{if(!((i=o-yu(u,a))>xu)){r>-xu?(n=u.P,e=u):i>-xu?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){mu[t.index]={site:t,halfedges:[]}}(t);var s=fu(t);if(vu.insert(n,s),n||e){if(n===e)return su(n),e=fu(n.site),vu.insert(s,e),s.edge=e.edge=Ja(n.site,s.site),uu(n),void uu(e);if(e){su(n),su(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,d=t[1]-f,p=e.site,g=p[0]-l,y=p[1]-f,v=2*(h*y-d*g),m=h*h+d*d,_=g*g+y*y,w=[(y*m-d*_)/v+l,(h*_-g*m)/v+f];Ga(e.edge,c,p,w),s.edge=Ja(c,t,null,w),e.edge=Ja(t,p,null,w),uu(n),uu(e)}else s.edge=Ja(n.site,s.site)}}function gu(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],s=e[1],c=s-n;if(!c)return u;var l=u-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+u)/2}function yu(t,n){var e=t.N;if(e)return gu(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var vu,mu,_u,wu,xu=1e-6,Mu=1e-12;function bu(t,n){return n[1]-t[1]||n[0]-t[0]}function Cu(t,n){var e,r,i,o=t.sort(bu).pop();for(wu=[],mu=new Array(t.length),vu=new Za,_u=new Za;;)if(i=iu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(pu(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;du(i.arc)}if(function(){for(var t,n,e,r,i=0,o=mu.length;i<o;++i)if((t=mu[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=nu(t,wu[n[e]]);for(a.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,o=wu.length;o--;)tu(i=wu[o],t,n,e,r)&&Ka(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>xu||Math.abs(i[0][1]-i[1][1])>xu)||delete wu[o]}(a,u,s,c),function(t,n,e,r){var i,o,a,u,s,c,l,f,h,d,p,g,y=mu.length,v=!0;for(i=0;i<y;++i)if(o=mu[i]){for(a=o.site,u=(s=o.halfedges).length;u--;)wu[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)p=(d=ru(o,wu[s[u]]))[0],g=d[1],f=(l=eu(o,wu[s[++u%c]]))[0],h=l[1],(Math.abs(p-f)>xu||Math.abs(g-h)>xu)&&(s.splice(u,0,wu.push(Qa(a,d,Math.abs(p-t)<xu&&r-g>xu?[t,Math.abs(f-t)<xu?h:r]:Math.abs(g-r)<xu&&e-p>xu?[Math.abs(h-r)<xu?f:e,r]:Math.abs(p-e)<xu&&g-n>xu?[e,Math.abs(f-e)<xu?h:n]:Math.abs(g-n)<xu&&p-t>xu?[Math.abs(h-n)<xu?f:t,n]:null))-1),++c);c&&(v=!1)}if(v){var m,_,w,x=1/0;for(i=0,v=null;i<y;++i)(o=mu[i])&&(w=(m=(a=o.site)[0]-t)*m+(_=a[1]-n)*_)<x&&(x=w,v=o);if(v){var M=[t,n],b=[t,r],C=[e,r],A=[e,n];v.halfedges.push(wu.push(Qa(a=v.site,M,b))-1,wu.push(Qa(a,b,C))-1,wu.push(Qa(a,C,A))-1,wu.push(Qa(a,A,M))-1)}}for(i=0;i<y;++i)(o=mu[i])&&(o.halfedges.length||delete mu[i])}(a,u,s,c)}this.edges=wu,this.cells=mu,vu=_u=wu=mu=null}Cu.prototype={constructor:Cu,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return eu(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u,s,c,l=e.site,f=-1,h=n[i[o-1]],d=h.left===l?h.right:h.left;++f<o;)a=d,d=(h=n[i[f]]).left===l?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(s=a,c=d,((u=l)[0]-c[0])*(s[1]-u[1])-(u[0]-s[0])*(c[1]-u[1])<0)&&t.push([l.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],c=n-u[1],f=s*s+c*c;f<l&&(l=f,a=u.index)}}))}while(null!==a);return o._found=r,null==e||l<=e*e?i.site:null}};Math.SQRT2;function Au(t,n,e){this.k=t,this.x=n,this.y=e}Au.prototype={constructor:Au,scale:function(t){return 1===t?this:new Au(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Au(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Au(1,0,0);Au.prototype;var ku=["#8459a4","#ef4451","#f4a726","#097dbc","#62bd5e","#75cccd","#da94c0","#ab4563","#e2e253","#d2d2d2"],Tu={createSvg(t,n,e){const r=Et("#"+t);if(r.empty())throw console.error(`Element with id ${t} not found`),`Element with id ${t} not found`;return r.append("svg").attr("id",t+"-svg").attr("width",e.width).attr("height",e.height)}};class Nu{constructor(t,n,e,r,i={width:Et("#"+e).node().clientWidth,height:Et("#"+e).node().clientHeight,innerWidth:Et("#"+e).node().clientWidth-100,innerHeight:Et("#"+e).node().clientHeight-100},o={top:50,right:50,bottom:50,left:50}){this.data=t,this.plotConfig=n,this.rootId=e,this.domId=r,this.dimension=i,this.padding=o,this.updateDimension(),this.createScales()}sanityCheck(t){const n=["x","y","key","node","values"];let e=["outerRadius","color"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"Aster Plot: input data error.";"key"==t[n]&&e.forEach(t=>{throw void 0===n[t]?"Aster Plot: input POINT error.":"Aster Plot: input success"})})})}updateDimension(){this.dimension.width=Et("#"+this.rootId).node().clientWidth,this.dimension.height=240*y(this.data.map(t=>t.y))+this.padding.top+this.padding.bottom,this.dimension.innerWidth=this.dimension.width-this.padding.left-this.padding.right,this.dimension.innerHeight=240*y(this.data.map(t=>t.y))}createScales(){console.log(this.data[0].values.map(t=>t.ancestry));const t=_a,n=Rn("rgb(250,250,250)","rgb(150,150,150)"),e=(t,e)=>{let r;return r="ORDINAL"==t?$r().domain(this.data[0].values.map(t=>t[""+e])).range(ku):ya().domain([0,1]).interpolator(n),r};this.scale={x:yi().domain(s(this.data.map(t=>t.x))).range([0,this.dimension.innerWidth]),y:yi().domain(s(this.data.map(t=>t.y))).range([0,this.dimension.innerHeight]),outerRadius:yi().domain([0,1]).range([20,70]),node:{color:ya().domain([0,1]).interpolator(t)},series:{color:e(this.plotConfig.series.color.type,"color"),customColor:e(this.plotConfig.series.customColor.type,"customColor")}}}render(){let t=this.data,n=this.scale;(document.getElementById(this.rootId+"-svg")?Et(`#${this.rootId}-svg`):Tu.createSvg(this.rootId,this.padding,this.dimension)).append("g").attr("class",""+this.domId).attr("transform",`translate(${this.padding.left}, ${this.padding.top})`).selectAll(".point").data(t).enter().append("g").attr("class","point").attr("transform",t=>`translate(${n.x(t.x)},${n.y(t.y)})`).each((function(t){(t=>{Et(this).selectAll(".outerRadius-tick").data(t).enter().append("circle").attr("class","outerRadius-tick").attr("cx",0).attr("cy",0).attr("r",t=>n.outerRadius(t))})([.5]),(()=>{var e=Oa().sort(null).value((function(){return 1})),i=Ya().innerRadius(20).outerRadius(t=>50*t.data.outerRadius+20),o=Et(this).selectAll(".series-custom").data(e(t.values).sort((function(t,n){return r(t.data.key,n.data.key)})));o.enter().append("path").attr("class","series-custom").attr("fill",t=>n.series.customColor(t.data.customColor)).attr("d",i),o.exit().remove()})(),(()=>{var e=Oa().sort(null).value((function(){return 1})),i=Ya().innerRadius(20).outerRadius(t=>50*t.data.outerRadius+20-5.5),o=Et(this).selectAll(".series").data(e(t.values).sort((function(t,n){return r(t.data.key,n.data.key)})));o.enter().append("g").each((function(t){(()=>{Et(this).append("path").attr("class","series").attr("fill",t=>n.series.color(t.data.color)).attr("d",i)})(),(()=>{Et(this).append("text").attr("class","series-label").attr("fill",t=>n.series.customColor(t.data.color)).attr("transform",(function(t){var e=i.centroid(t),r=e[0],o=e[1],a=Math.sqrt(r*r+o*o),u=n.outerRadius(t.data.outerRadius)+15;return"translate("+r/a*u+","+o/a*u+")"})).attr("text-anchor","middle").text(t.data.outerRadius).attr("dy",4)})()})),o.exit().remove()})(),(()=>{Et(this).append("circle").attr("class","node-circle").attr("cx",0).attr("cy",0).attr("r",20).attr("fill",n.node.color(t.node.color))})(),(()=>{Et(this).append("text").attr("class","node-label").attr("x",0).attr("y",0).attr("dy",6).html(t.node.label).attr("text-anchor","middle")})(),(()=>{Et(this).append("text").html("Guide ID: "+t.label).attr("class","point-label").attr("x",0).attr("y",-90).attr("text-anchor","middle")})()}))}}class Uu{constructor(t,n,e,r,i,o={top:50,right:50,bottom:50,left:50}){this.data=t,this.plotConfig=n,this.rootId=e,this.domId=r,this.dimension=i,this.padding=o,this.updateDimension(),this.createScales()}sanityCheck(t){}updateDimension(){this.dimension.height=130*y(this.data.map(t=>t.y))+this.padding.top+this.padding.bottom,this.dimension.innerHeight=130*y(this.data.map(t=>t.y)),this.dimension.width=Et("#"+this.rootId).node().clientWidth,this.dimension.innerWidth=this.dimension.width-this.padding.left-this.padding.right}createScales(){Rn("rgb(250,250,250)","rgb(150,150,150)");this.scale={y:yi().domain(s(this.data.map(t=>t.y))).range([0,this.dimension.innerHeight]),point:{x:yi().range([0,this.dimension.innerWidth]).domain([0,8]),x1:yi().range([0,this.dimension.innerWidth]),outerRadius:yi().domain([0,.001,1]).range([0,8,50]),color:$r().domain(["oth","ami","sas","fin","eas","amr","afr","mid","asj","nfe"]).range(ku)}}}render(){let t=this.dimension,n=this.data,e=this.scale;(document.getElementById(this.rootId+"-svg")?Et(`#${this.rootId}-svg`):Tu.createSvg(this.rootId,this.padding,this.dimension)).append("g").attr("class",""+this.domId).attr("transform",`translate(${this.padding.left}, ${this.padding.top})`).selectAll(".plot").data(n).enter().append("g").attr("class","plot").attr("id",t=>"plot-"+t.key).attr("transform",t=>`translate(0,${e.y(t.y)})`).each((function(n){!function(t,n,e,r){e.x1.domain(s(n.map(t=>t.x1)));Et("#"+t).append("rect").attr("width",r.innerWidth).attr("x",0).attr("y",0).attr("height",30).attr("class","track"),Et("#"+t).selectAll(".track-tick").data(n).enter().append("g").attr("class","track-tick").attr("transform",t=>`translate(${e.x1(t.x1)},0)`).each((function(t){Et(this).append("line").attr("class","track-line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",30),Et(this).append("line").attr("class","track-line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",-50),Et(this).append("text").attr("x",0).attr("y",30).attr("dy",14).attr("text-anchor","middle").html((function(t){return t.x1})).attr("class","track-tick")}))}("plot-"+n.key,n.values,e.point,t),function(t,n,e){Et("#"+t).selectAll(".point").data(n).enter().append("g").attr("class","point").attr("transform",t=>`translate(${e.x1(t.x1)},-50)`).each((function(t){(()=>{var n=Oa().sort(null).value((function(){return 1})),i=Ya().innerRadius(0).outerRadius(t=>e.outerRadius(t.data.outerRadius)),o=Et(this).selectAll(".series").data(n(t.values).sort((function(t,n){return r(t.data.key,n.data.key)})));o.enter().append("g").each((function(t){(()=>{Et(this).append("path").attr("class","series").attr("fill",t=>e.color(t.data.color)).attr("d",i)})(),(()=>{Et(this).append("text").attr("class","series-label").attr("fill",t=>e.color(t.data.color)).attr("transform",(function(t){var n=i.centroid(t),r=n[0],o=n[1],a=Math.sqrt(r*r+o*o),u=e.outerRadius(t.data.outerRadius)+15;return"translate("+r/a*u+","+o/a*u+")"})).attr("text-anchor","middle").text(t.data.outerRadius).attr("dy",4)})()})),o.exit().remove()})()}))}("plot-"+n.key,n.values,e.point)}))}}var Ru={onlyUnique:(t,n,e)=>e.indexOf(t)===n,precise:t=>Number.parseFloat(t).toPrecision(1),getNestedExtent(t,n){var e=[];return t.map((function(t){e=e.concat.apply(e,t)})),s(e.map(t=>t[n]))},groupBy(t,n){let e={};return t.forEach((function(t){var r=JSON.stringify(n(t));e[r]=e[r]||[],e[r].push(t)})),Object.keys(e).map((function(t){return e[t]}))}};e.d(n,"loadData",(function(){return Su}));function Du(t,n){!function(t,n){Et("#"+t.domId).remove();let e=function(t,n){let e=(()=>{let t=[];for(var n=0;n<6;n++)for(var e=0;e<6;e++)t.push({y:n,x:e});return t})();return t.forEach((t,r)=>{t.x=((t,n,r)=>{let i;i=null==t.x?e[r].x:n[""+t.x];return i})(n.axis,t,r),t.y=((t,n,r)=>{let i;i=null==t.y?e[r].y:n[""+t.y];return i})(n.axis,t,r),t.label=t[""+n.label],t.node={color:t[""+n.node.color.attr],label:Ru.precise(t[""+n.node.label])},t.values.forEach(t=>{t.customColor=t[""+n.series.customColor.attr],t.color=t[""+n.series.color.attr],t.outerRadius=t[""+n.series.outerRadius]})}),t}(function(t){let n=tr().key(t=>t.guideID).key(t=>t.ancestry).entries(t.guides);return n.forEach(n=>{n.guideID=n.key,n.mismatchFrequency=t.guidesToMismatchFrequency[""+n.key].total,n.values.forEach(e=>{e.ancestry=e.key,e.mismatchFrequency=t.guidesToMismatchFrequency[""+n.key][""+e.key]})}),n}(n),t.summaryView.plotConfig);new Nu(e,t.summaryView.plotConfig,t.summaryView.rootId,t.summaryView.domId,t.summaryView.dimension,t.summaryView.padding).render();let r=function(t,n){return t.forEach((t,e)=>{t.x=0,t.y=e,t.label=t[""+n.label],t.values.forEach((t,e)=>{t.x1=+t[""+n.point.axis.x],t.x2=+t[""+n.point.axis.x],t.x=e,t.y=0,t.label=t[""+n.point.label],t.values.forEach(t=>{t.color=t[""+n.point.series.color.attr],t.customColor=t[""+n.point.series.customColor.attr],t.outerRadius=t[""+n.point.series.outerRadius]})})}),t}(function(t){let n=tr().key(t=>t.guideID).key(t=>t.position).entries(t.guides);return n.forEach(n=>{n.guideID=n.key,n.mismatchFrequency=t.guidesToMismatchFrequency[""+n.key].total,n.values.forEach(t=>{t.position=t.key,t.guideID=n.guideID})}),console.log(n),n}(n),t.gardenView.plotConfig);new Uu(r,t.gardenView.plotConfig,t.gardenView.rootId,t.gardenView.domId,t.gardenView.dimension,t.gardenView.padding).render()}(t,n)}async function Su(t,n){let e={};await Promise.all([br(""+n.guideData),br(""+n.guidesToMismatchFrequency),br(""+n.guidesToGenes)]).then(t=>{e.guides=t[0].filter(t=>"total"!=t.ancestry),e.guidesToMismatchFrequency=t[1],e.guidesToGenes=t[2]}),Du(t,e)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,